{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import { Button, Form } from 'react-bootstrap';\n// import { Formik } from 'formik';\n// import * as yup from 'yup';\n// import Navigation from '../Components/Nav';\n// import Axios from 'axios';\n// import { useParams, useNavigate } from 'react-router-dom';\n// import '../Pages/ProductAdd.css';\n\n// const schema = yup.object().shape({\n//   ProductName: yup.string().required('Product Name is required'),\n//   Price: yup.number().required('Price is required').typeError('Price must be a number'),\n//   Quantity: yup.number().required('Quantity is required').typeError('Quantity must be a number'),\n//   Category: yup.string().required('Category is required'),\n//   SubCategory: yup.string().required('Subcategory is required'),\n//   Brand: yup.string().required('Brand is required'),\n// });\n\n// function ProductUpdate() {\n//   const { productId } = useParams(); // Fetching productId from URL params\n//   const navigate = useNavigate();\n\n//   const [categories, setCategories] = useState([]);\n//   const [subCategories, setSubCategories] = useState([]);\n//   const [selectedCategory, setSelectedCategory] = useState('');\n\n//   // Fetch Categories\n//   useEffect(() => {\n//     fetchCategories();\n//   }, []);\n\n//   const fetchCategories = async () => {\n//     try {\n//       const response = await Axios.get('http://localhost:8000/category');\n//       setCategories(response.data);\n//     } catch (error) {\n//       console.error('Error fetching categories:', error);\n//     }\n//   };\n\n//   // Fetch Subcategories\n//   useEffect(() => {\n//     const fetchSubCategories = async () => {\n//       try {\n//         const response = await Axios.get('http://localhost:8000/subcategory');\n//         setSubCategories(response.data);\n//         console.log(subCategories)\n//       } catch (error) {\n//         console.error('Error fetching subcategories:', error);\n//       }\n//     };\n\n//     fetchSubCategories();\n//   }, []);\n\n//   const [initialValues, setInitialValues] = useState({\n//     ProductName: '',\n//     Price: '',\n//     Description: '',\n//     Quantity: '',\n//     Category: '',\n//     SubCategory: '',\n//     Brand: ''\n//   });\n\n//   useEffect(() => {\n//     const fetchProduct = async () => {\n//       try {\n//         const response = await Axios.get(`http://localhost:8000/products/${productId}`);\n//         const productData = response.data;\n//         setInitialValues({\n//           ProductName: productData.ProductName,\n//           Price: productData.Price,\n//           Description: productData.Description,\n//           Quantity: productData.Quantity,\n//           Category: productData.Category._id,\n//           SubCategory: productData.SubCategory._id,\n//           Brand: productData.Brand\n//         });\n//       } catch (error) {\n//         console.error('Error fetching product:', error);\n//       }\n//     };\n\n//     fetchProduct();\n//   }, [productId]);\n\n//   const handleFormSubmit = async (values) => {\n//     try {\n//       const response = await Axios.put(`http://localhost:8000/products/${productId}`, values);\n//       console.log('Product updated successfully:', response.data);\n//       navigate('/home'); // Redirect to product list page after successful update\n//     } catch (error) {\n//       console.error('Error updating product:', error);\n//     }\n//   };\n\n//   return (\n//     <>\n//       <Navigation />\n//       <div className=\"pcenter-form\">\n//         <Formik\n//           initialValues={initialValues}\n//           validationSchema={schema}\n//           onSubmit={handleFormSubmit}\n//           enableReinitialize // Allows form to reinitialize with new initialValues\n//         >\n//           {({ handleSubmit, handleChange, values, touched, errors, setFieldValue }) => (\n//             <Form noValidate onSubmit={handleSubmit} className=\"pform\">\n//               <h4 className=\"text-center\">Edit Product</h4>\n\n//               <Form.Group controlId=\"validationProductName\" className=\"mb-3\">\n//                 <Form.Label>Product Name</Form.Label>\n//                 <Form.Control\n//                   type=\"text\"\n//                   name=\"ProductName\"\n//                   value={values.ProductName}\n//                   onChange={handleChange}\n//                   isInvalid={touched.ProductName && !!errors.ProductName}\n//                 />\n//                 <Form.Control.Feedback type=\"invalid\">\n//                   {errors.ProductName}\n//                 </Form.Control.Feedback>\n//               </Form.Group>\n\n//               <Form.Group controlId=\"validationPrice\" className=\"mb-3\">\n//                 <Form.Label>Price</Form.Label>\n//                 <Form.Control\n//                   type=\"text\"\n//                   name=\"Price\"\n//                   value={values.Price}\n//                   onChange={handleChange}\n//                   isInvalid={touched.Price && !!errors.Price}\n//                 />\n//                 <Form.Control.Feedback type=\"invalid\">\n//                   {errors.Price}\n//                 </Form.Control.Feedback>\n//               </Form.Group>\n\n//               <Form.Group controlId=\"validationDescription\" className=\"mb-3\">\n//                 <Form.Label>Description</Form.Label>\n//                 <Form.Control\n//                   type=\"text\"\n//                   name=\"Description\"\n//                   value={values.Description}\n//                   onChange={handleChange}\n//                   isInvalid={touched.Description && !!errors.Description}\n//                 />\n//                 <Form.Control.Feedback type=\"invalid\">\n//                   {errors.Description}\n//                 </Form.Control.Feedback>\n//               </Form.Group>\n\n//               <Form.Group controlId=\"validationQuantity\" className=\"mb-3\">\n//                 <Form.Label>Quantity</Form.Label>\n//                 <Form.Control\n//                   type=\"text\"\n//                   name=\"Quantity\"\n//                   value={values.Quantity}\n//                   onChange={handleChange}\n//                   isInvalid={touched.Quantity && !!errors.Quantity}\n//                 />\n//                 <Form.Control.Feedback type=\"invalid\">\n//                   {errors.Quantity}\n//                 </Form.Control.Feedback>\n//               </Form.Group>\n\n//               <Form.Group controlId=\"validationCategory\" className=\"mb-3\">\n//                 <Form.Label>Category</Form.Label>\n//                 <Form.Control\n//                   as=\"select\"\n//                   name=\"Category\"\n//                   value={values.selectedCategory} //\n//                   onChange={(e) => {\n//                     handleChange(e);\n//                     setSelectedCategory(e.target.value); // Update selected category\n//                   }}\n//                   isInvalid={touched.Category && !!errors.Category}\n//                 >\n//                   <option value=\"\">Select Category...</option>\n//                   {categories.map(category => (\n//                     <option key={category._id} value={category._id}>\n//                       {category.CategoryName}\n//                     </option>\n//                   ))}\n//                 </Form.Control>\n//                 <Form.Control.Feedback type=\"invalid\">\n//                   {errors.Category}\n//                 </Form.Control.Feedback>\n//               </Form.Group>\n\n//               <Form.Group controlId=\"validationSubCategory\" className=\"mb-3\">\n//                 <Form.Label>Subcategory</Form.Label>\n//                 <Form.Control\n//                   as=\"select\"\n//                   name=\"SubCategory\"\n//                   value={values.SubCategory}\n//                   onChange={handleChange}\n//                   isInvalid={touched.SubCategory && !!errors.SubCategory}\n//                 >\n//                   <option value=\"\">Select Subcategory...</option>\n//                   {subCategories.map(subcategory => (\n//                     <option key={subcategory._id} value={subcategory._id}>\n//                       {subcategory.subcategory}\n//                     </option>\n//                   ))}\n//                 </Form.Control>\n//                 <Form.Control.Feedback type=\"invalid\">\n//                   {errors.SubCategory}\n//                 </Form.Control.Feedback>\n//               </Form.Group>\n\n//               <Form.Group controlId=\"validationBrand\" className=\"mb-3\">\n//                 <Form.Label>Brand</Form.Label>\n//                 <Form.Control\n//                   type=\"text\"\n//                   name=\"Brand\"\n//                   value={values.Brand}\n//                   onChange={handleChange}\n//                   isInvalid={touched.Brand && !!errors.Brand}\n//                 />\n//                 <Form.Control.Feedback type=\"invalid\">\n//                   {errors.Brand}\n//                 </Form.Control.Feedback>\n//               </Form.Group>\n\n//               <Button className=\"mx-auto d-block\" type=\"submit\">Update Product</Button>\n//             </Form>\n//           )}\n//         </Formik>\n//       </div>\n//     </>\n//   );\n// }\n\n// export default ProductUpdate;","map":{"version":3,"names":[],"sources":["C:/Users/Pandi Eswaran/projects/Shopify/admin_frontend/src/Pages/ProductUpdate.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { Button, Form } from 'react-bootstrap';\r\n// import { Formik } from 'formik';\r\n// import * as yup from 'yup';\r\n// import Navigation from '../Components/Nav';\r\n// import Axios from 'axios';\r\n// import { useParams, useNavigate } from 'react-router-dom';\r\n// import '../Pages/ProductAdd.css';\r\n\r\n// const schema = yup.object().shape({\r\n//   ProductName: yup.string().required('Product Name is required'),\r\n//   Price: yup.number().required('Price is required').typeError('Price must be a number'),\r\n//   Quantity: yup.number().required('Quantity is required').typeError('Quantity must be a number'),\r\n//   Category: yup.string().required('Category is required'),\r\n//   SubCategory: yup.string().required('Subcategory is required'),\r\n//   Brand: yup.string().required('Brand is required'),\r\n// });\r\n\r\n// function ProductUpdate() {\r\n//   const { productId } = useParams(); // Fetching productId from URL params\r\n//   const navigate = useNavigate();\r\n\r\n//   const [categories, setCategories] = useState([]);\r\n//   const [subCategories, setSubCategories] = useState([]);\r\n//   const [selectedCategory, setSelectedCategory] = useState('');\r\n\r\n\r\n//   // Fetch Categories\r\n//   useEffect(() => {\r\n//     fetchCategories();\r\n//   }, []);\r\n\r\n//   const fetchCategories = async () => {\r\n//     try {\r\n//       const response = await Axios.get('http://localhost:8000/category');\r\n//       setCategories(response.data);\r\n//     } catch (error) {\r\n//       console.error('Error fetching categories:', error);\r\n//     }\r\n//   };\r\n\r\n//   // Fetch Subcategories\r\n//   useEffect(() => {\r\n//     const fetchSubCategories = async () => {\r\n//       try {\r\n//         const response = await Axios.get('http://localhost:8000/subcategory');\r\n//         setSubCategories(response.data);\r\n//         console.log(subCategories)\r\n//       } catch (error) {\r\n//         console.error('Error fetching subcategories:', error);\r\n//       }\r\n//     };\r\n\r\n//     fetchSubCategories();\r\n//   }, []);\r\n\r\n//   const [initialValues, setInitialValues] = useState({\r\n//     ProductName: '',\r\n//     Price: '',\r\n//     Description: '',\r\n//     Quantity: '',\r\n//     Category: '',\r\n//     SubCategory: '',\r\n//     Brand: ''\r\n//   });\r\n\r\n//   useEffect(() => {\r\n//     const fetchProduct = async () => {\r\n//       try {\r\n//         const response = await Axios.get(`http://localhost:8000/products/${productId}`);\r\n//         const productData = response.data;\r\n//         setInitialValues({\r\n//           ProductName: productData.ProductName,\r\n//           Price: productData.Price,\r\n//           Description: productData.Description,\r\n//           Quantity: productData.Quantity,\r\n//           Category: productData.Category._id,\r\n//           SubCategory: productData.SubCategory._id,\r\n//           Brand: productData.Brand\r\n//         });\r\n//       } catch (error) {\r\n//         console.error('Error fetching product:', error);\r\n//       }\r\n//     };\r\n\r\n//     fetchProduct();\r\n//   }, [productId]);\r\n\r\n//   const handleFormSubmit = async (values) => {\r\n//     try {\r\n//       const response = await Axios.put(`http://localhost:8000/products/${productId}`, values);\r\n//       console.log('Product updated successfully:', response.data);\r\n//       navigate('/home'); // Redirect to product list page after successful update\r\n//     } catch (error) {\r\n//       console.error('Error updating product:', error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       <Navigation />\r\n//       <div className=\"pcenter-form\">\r\n//         <Formik\r\n//           initialValues={initialValues}\r\n//           validationSchema={schema}\r\n//           onSubmit={handleFormSubmit}\r\n//           enableReinitialize // Allows form to reinitialize with new initialValues\r\n//         >\r\n//           {({ handleSubmit, handleChange, values, touched, errors, setFieldValue }) => (\r\n//             <Form noValidate onSubmit={handleSubmit} className=\"pform\">\r\n//               <h4 className=\"text-center\">Edit Product</h4>\r\n\r\n//               <Form.Group controlId=\"validationProductName\" className=\"mb-3\">\r\n//                 <Form.Label>Product Name</Form.Label>\r\n//                 <Form.Control\r\n//                   type=\"text\"\r\n//                   name=\"ProductName\"\r\n//                   value={values.ProductName}\r\n//                   onChange={handleChange}\r\n//                   isInvalid={touched.ProductName && !!errors.ProductName}\r\n//                 />\r\n//                 <Form.Control.Feedback type=\"invalid\">\r\n//                   {errors.ProductName}\r\n//                 </Form.Control.Feedback>\r\n//               </Form.Group>\r\n\r\n//               <Form.Group controlId=\"validationPrice\" className=\"mb-3\">\r\n//                 <Form.Label>Price</Form.Label>\r\n//                 <Form.Control\r\n//                   type=\"text\"\r\n//                   name=\"Price\"\r\n//                   value={values.Price}\r\n//                   onChange={handleChange}\r\n//                   isInvalid={touched.Price && !!errors.Price}\r\n//                 />\r\n//                 <Form.Control.Feedback type=\"invalid\">\r\n//                   {errors.Price}\r\n//                 </Form.Control.Feedback>\r\n//               </Form.Group>\r\n\r\n//               <Form.Group controlId=\"validationDescription\" className=\"mb-3\">\r\n//                 <Form.Label>Description</Form.Label>\r\n//                 <Form.Control\r\n//                   type=\"text\"\r\n//                   name=\"Description\"\r\n//                   value={values.Description}\r\n//                   onChange={handleChange}\r\n//                   isInvalid={touched.Description && !!errors.Description}\r\n//                 />\r\n//                 <Form.Control.Feedback type=\"invalid\">\r\n//                   {errors.Description}\r\n//                 </Form.Control.Feedback>\r\n//               </Form.Group>\r\n\r\n//               <Form.Group controlId=\"validationQuantity\" className=\"mb-3\">\r\n//                 <Form.Label>Quantity</Form.Label>\r\n//                 <Form.Control\r\n//                   type=\"text\"\r\n//                   name=\"Quantity\"\r\n//                   value={values.Quantity}\r\n//                   onChange={handleChange}\r\n//                   isInvalid={touched.Quantity && !!errors.Quantity}\r\n//                 />\r\n//                 <Form.Control.Feedback type=\"invalid\">\r\n//                   {errors.Quantity}\r\n//                 </Form.Control.Feedback>\r\n//               </Form.Group>\r\n\r\n//               <Form.Group controlId=\"validationCategory\" className=\"mb-3\">\r\n//                 <Form.Label>Category</Form.Label>\r\n//                 <Form.Control\r\n//                   as=\"select\"\r\n//                   name=\"Category\"\r\n//                   value={values.selectedCategory} //\r\n//                   onChange={(e) => {\r\n//                     handleChange(e);\r\n//                     setSelectedCategory(e.target.value); // Update selected category\r\n//                   }}\r\n//                   isInvalid={touched.Category && !!errors.Category}\r\n//                 >\r\n//                   <option value=\"\">Select Category...</option>\r\n//                   {categories.map(category => (\r\n//                     <option key={category._id} value={category._id}>\r\n//                       {category.CategoryName}\r\n//                     </option>\r\n//                   ))}\r\n//                 </Form.Control>\r\n//                 <Form.Control.Feedback type=\"invalid\">\r\n//                   {errors.Category}\r\n//                 </Form.Control.Feedback>\r\n//               </Form.Group>\r\n\r\n//               <Form.Group controlId=\"validationSubCategory\" className=\"mb-3\">\r\n//                 <Form.Label>Subcategory</Form.Label>\r\n//                 <Form.Control\r\n//                   as=\"select\"\r\n//                   name=\"SubCategory\"\r\n//                   value={values.SubCategory}\r\n//                   onChange={handleChange}\r\n//                   isInvalid={touched.SubCategory && !!errors.SubCategory}\r\n//                 >\r\n//                   <option value=\"\">Select Subcategory...</option>\r\n//                   {subCategories.map(subcategory => (\r\n//                     <option key={subcategory._id} value={subcategory._id}>\r\n//                       {subcategory.subcategory}\r\n//                     </option>\r\n//                   ))}\r\n//                 </Form.Control>\r\n//                 <Form.Control.Feedback type=\"invalid\">\r\n//                   {errors.SubCategory}\r\n//                 </Form.Control.Feedback>\r\n//               </Form.Group>\r\n\r\n\r\n//               <Form.Group controlId=\"validationBrand\" className=\"mb-3\">\r\n//                 <Form.Label>Brand</Form.Label>\r\n//                 <Form.Control\r\n//                   type=\"text\"\r\n//                   name=\"Brand\"\r\n//                   value={values.Brand}\r\n//                   onChange={handleChange}\r\n//                   isInvalid={touched.Brand && !!errors.Brand}\r\n//                 />\r\n//                 <Form.Control.Feedback type=\"invalid\">\r\n//                   {errors.Brand}\r\n//                 </Form.Control.Feedback>\r\n//               </Form.Group>\r\n\r\n//               <Button className=\"mx-auto d-block\" type=\"submit\">Update Product</Button>\r\n//             </Form>\r\n//           )}\r\n//         </Formik>\r\n//       </div>\r\n//     </>\r\n//   );\r\n// }\r\n\r\n// export default ProductUpdate;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}