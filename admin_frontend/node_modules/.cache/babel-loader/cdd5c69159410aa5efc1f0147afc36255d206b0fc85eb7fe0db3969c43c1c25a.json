{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pandi Eswaran\\\\projects\\\\Shopify\\\\admin_frontend\\\\src\\\\Pages\\\\ProductUpdate.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { Button, Form } from 'react-bootstrap';\n// import { Formik } from 'formik';\n// import * as yup from 'yup';\n// import Navigation from '../Components/Nav';\n// import Axios from 'axios';\n// import { useParams, useNavigate } from 'react-router-dom';\n// import '../Pages/ProductAdd.css';\n\n// const schema = yup.object().shape({\n//   ProductName: yup.string().required('Product Name is required'),\n//   Price: yup.number().required('Price is required').typeError('Price must be a number'),\n//   Quantity: yup.number().required('Quantity is required').typeError('Quantity must be a number'),\n//   Category: yup.string().required('Category is required'),\n//   SubCategory: yup.string().required('Subcategory is required'),\n//   Brand: yup.string().required('Brand is required'),\n// });\n\n// function ProductUpdate() {\n//   const { productId } = useParams(); // Fetching productId from URL params\n//   const navigate = useNavigate();\n\n//   const [categories, setCategories] = useState([]);\n//   const [subCategories, setSubCategories] = useState([]);\n//   const [selectedCategory, setSelectedCategory] = useState('');\n\n//   // Fetch Categories\n//   useEffect(() => {\n//     fetchCategories();\n//   }, []);\n\n//   const fetchCategories = async () => {\n//     try {\n//       const response = await Axios.get('http://localhost:8000/category');\n//       setCategories(response.data);\n//     } catch (error) {\n//       console.error('Error fetching categories:', error);\n//     }\n//   };\n\n//   // Fetch Subcategories\n//   useEffect(() => {\n//     const fetchSubCategories = async () => {\n//       try {\n//         const response = await Axios.get('http://localhost:8000/subcategory');\n//         setSubCategories(response.data);\n//         console.log(subCategories)\n//       } catch (error) {\n//         console.error('Error fetching subcategories:', error);\n//       }\n//     };\n\n//     fetchSubCategories();\n//   }, []);\n\n//   const [initialValues, setInitialValues] = useState({\n//     ProductName: '',\n//     Price: '',\n//     Description: '',\n//     Quantity: '',\n//     Category: '',\n//     SubCategory: '',\n//     Brand: ''\n//   });\n\n//   useEffect(() => {\n//     const fetchProduct = async () => {\n//       try {\n//         const response = await Axios.get(`http://localhost:8000/products/${productId}`);\n//         const productData = response.data;\n//         setInitialValues({\n//           ProductName: productData.ProductName,\n//           Price: productData.Price,\n//           Description: productData.Description,\n//           Quantity: productData.Quantity,\n//           Category: productData.Category._id,\n//           SubCategory: productData.SubCategory._id,\n//           Brand: productData.Brand\n//         });\n//       } catch (error) {\n//         console.error('Error fetching product:', error);\n//       }\n//     };\n\n//     fetchProduct();\n//   }, [productId]);\n\n//   const handleFormSubmit = async (values) => {\n//     try {\n//       const response = await Axios.put(`http://localhost:8000/products/${productId}`, values);\n//       console.log('Product updated successfully:', response.data);\n//       navigate('/home'); // Redirect to product list page after successful update\n//     } catch (error) {\n//       console.error('Error updating product:', error);\n//     }\n//   };\n\n//   return (\n//     <>\n//       <Navigation />\n//       <div className=\"pcenter-form\">\n//         <Formik\n//           initialValues={initialValues}\n//           validationSchema={schema}\n//           onSubmit={handleFormSubmit}\n//           enableReinitialize // Allows form to reinitialize with new initialValues\n//         >\n//           {({ handleSubmit, handleChange, values, touched, errors, setFieldValue }) => (\n//             <Form noValidate onSubmit={handleSubmit} className=\"pform\">\n//               <h4 className=\"text-center\">Edit Product</h4>\n\n//               <Form.Group controlId=\"validationProductName\" className=\"mb-3\">\n//                 <Form.Label>Product Name</Form.Label>\n//                 <Form.Control\n//                   type=\"text\"\n//                   name=\"ProductName\"\n//                   value={values.ProductName}\n//                   onChange={handleChange}\n//                   isInvalid={touched.ProductName && !!errors.ProductName}\n//                 />\n//                 <Form.Control.Feedback type=\"invalid\">\n//                   {errors.ProductName}\n//                 </Form.Control.Feedback>\n//               </Form.Group>\n\n//               <Form.Group controlId=\"validationPrice\" className=\"mb-3\">\n//                 <Form.Label>Price</Form.Label>\n//                 <Form.Control\n//                   type=\"text\"\n//                   name=\"Price\"\n//                   value={values.Price}\n//                   onChange={handleChange}\n//                   isInvalid={touched.Price && !!errors.Price}\n//                 />\n//                 <Form.Control.Feedback type=\"invalid\">\n//                   {errors.Price}\n//                 </Form.Control.Feedback>\n//               </Form.Group>\n\n//               <Form.Group controlId=\"validationDescription\" className=\"mb-3\">\n//                 <Form.Label>Description</Form.Label>\n//                 <Form.Control\n//                   type=\"text\"\n//                   name=\"Description\"\n//                   value={values.Description}\n//                   onChange={handleChange}\n//                   isInvalid={touched.Description && !!errors.Description}\n//                 />\n//                 <Form.Control.Feedback type=\"invalid\">\n//                   {errors.Description}\n//                 </Form.Control.Feedback>\n//               </Form.Group>\n\n//               <Form.Group controlId=\"validationQuantity\" className=\"mb-3\">\n//                 <Form.Label>Quantity</Form.Label>\n//                 <Form.Control\n//                   type=\"text\"\n//                   name=\"Quantity\"\n//                   value={values.Quantity}\n//                   onChange={handleChange}\n//                   isInvalid={touched.Quantity && !!errors.Quantity}\n//                 />\n//                 <Form.Control.Feedback type=\"invalid\">\n//                   {errors.Quantity}\n//                 </Form.Control.Feedback>\n//               </Form.Group>\n\n//               <Form.Group controlId=\"validationCategory\" className=\"mb-3\">\n//                 <Form.Label>Category</Form.Label>\n//                 <Form.Control\n//                   as=\"select\"\n//                   name=\"Category\"\n//                   value={values.selectedCategory} //\n//                   onChange={(e) => {\n//                     handleChange(e);\n//                     setSelectedCategory(e.target.value); // Update selected category\n//                   }}\n//                   isInvalid={touched.Category && !!errors.Category}\n//                 >\n//                   <option value=\"\">Select Category...</option>\n//                   {categories.map(category => (\n//                     <option key={category._id} value={category._id}>\n//                       {category.CategoryName}\n//                     </option>\n//                   ))}\n//                 </Form.Control>\n//                 <Form.Control.Feedback type=\"invalid\">\n//                   {errors.Category}\n//                 </Form.Control.Feedback>\n//               </Form.Group>\n\n//               <Form.Group controlId=\"validationSubCategory\" className=\"mb-3\">\n//                 <Form.Label>Subcategory</Form.Label>\n//                 <Form.Control\n//                   as=\"select\"\n//                   name=\"SubCategory\"\n//                   value={values.SubCategory}\n//                   onChange={handleChange}\n//                   isInvalid={touched.SubCategory && !!errors.SubCategory}\n//                 >\n//                   <option value=\"\">Select Subcategory...</option>\n//                   {subCategories.map(subcategory => (\n//                     <option key={subcategory._id} value={subcategory._id}>\n//                       {subcategory.subcategory}\n//                     </option>\n//                   ))}\n//                 </Form.Control>\n//                 <Form.Control.Feedback type=\"invalid\">\n//                   {errors.SubCategory}\n//                 </Form.Control.Feedback>\n//               </Form.Group>\n\n//               <Form.Group controlId=\"validationBrand\" className=\"mb-3\">\n//                 <Form.Label>Brand</Form.Label>\n//                 <Form.Control\n//                   type=\"text\"\n//                   name=\"Brand\"\n//                   value={values.Brand}\n//                   onChange={handleChange}\n//                   isInvalid={touched.Brand && !!errors.Brand}\n//                 />\n//                 <Form.Control.Feedback type=\"invalid\">\n//                   {errors.Brand}\n//                 </Form.Control.Feedback>\n//               </Form.Group>\n\n//               <Button className=\"mx-auto d-block\" type=\"submit\">Update Product</Button>\n//             </Form>\n//           )}\n//         </Formik>\n//       </div>\n//     </>\n//   );\n// }\n\n// export default ProductUpdate;\n\nimport React, { useState, useEffect } from 'react';\nimport { Button, Form } from 'react-bootstrap';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport Navigation from '../Components/Nav';\nimport Axios from 'axios';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport '../Pages/ProductAdd.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst schema = yup.object().shape({\n  ProductName: yup.string().required('Product Name is required'),\n  Price: yup.number().required('Price is required').typeError('Price must be a number'),\n  Quantity: yup.number().required('Quantity is required').typeError('Quantity must be a number'),\n  Category: yup.string().required('Category is required'),\n  SubCategory: yup.string().required('Subcategory is required'),\n  Brand: yup.string().required('Brand is required')\n});\nfunction ProductUpdate() {\n  _s();\n  const {\n    productId\n  } = useParams(); // Fetching productId from URL params\n  const navigate = useNavigate();\n  const [categories, setCategories] = useState([]);\n  const [subCategories, setSubCategories] = useState([]);\n  const [initialValues, setInitialValues] = useState({\n    ProductName: '',\n    Price: '',\n    Description: '',\n    Quantity: '',\n    Category: '',\n    SubCategory: '',\n    Brand: ''\n  });\n\n  // Fetch Categories\n  useEffect(() => {\n    const fetchCategories = async () => {\n      try {\n        const response = await Axios.get('http://localhost:8000/category');\n        setCategories(response.data);\n      } catch (error) {\n        console.error('Error fetching categories:', error);\n      }\n    };\n    fetchCategories();\n  }, []);\n\n  // Fetch Subcategories\n  useEffect(() => {\n    const fetchSubCategories = async () => {\n      try {\n        const response = await Axios.get('http://localhost:8000/subcategory');\n        setSubCategories(response.data);\n      } catch (error) {\n        console.error('Error fetching subcategories:', error);\n      }\n    };\n    fetchSubCategories();\n  }, []);\n  useEffect(() => {\n    const fetchProduct = async () => {\n      try {\n        const response = await Axios.get(`http://localhost:8000/products/${productId}`);\n        const productData = response.data;\n        setInitialValues({\n          ProductName: productData.ProductName,\n          Price: productData.Price,\n          Description: productData.Description,\n          Quantity: productData.Quantity,\n          Category: productData.Category ? productData.Category._id : '',\n          SubCategory: productData.SubCategory ? productData.SubCategory._id : '',\n          Brand: productData.Brand\n        });\n      } catch (error) {\n        console.error('Error fetching product:', error);\n      }\n    };\n    fetchProduct();\n  }, [productId]);\n  const handleFormSubmit = async values => {\n    try {\n      const response = await Axios.put(`http://localhost:8000/products/${productId}`, values);\n      console.log('Product updated successfully:', response.data);\n      navigate('/home'); // Redirect to product list page after successful update\n    } catch (error) {\n      console.error('Error updating product:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pcenter-form\",\n      children: /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: initialValues,\n        validationSchema: schema,\n        onSubmit: handleFormSubmit,\n        enableReinitialize: true // Allows form to reinitialize with new initialValues\n        ,\n        children: ({\n          handleSubmit,\n          handleChange,\n          values,\n          touched,\n          errors\n        }) => /*#__PURE__*/_jsxDEV(Form, {\n          noValidate: true,\n          onSubmit: handleSubmit,\n          className: \"pform\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"text-center\",\n            children: \"Edit Product\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"validationProductName\",\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Product Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              name: \"ProductName\",\n              value: values.ProductName,\n              onChange: handleChange,\n              isInvalid: touched.ProductName && !!errors.ProductName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n              type: \"invalid\",\n              children: errors.ProductName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 358,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"validationPrice\",\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Price\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 364,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              name: \"Price\",\n              value: values.Price,\n              onChange: handleChange,\n              isInvalid: touched.Price && !!errors.Price\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 365,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n              type: \"invalid\",\n              children: errors.Price\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 372,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 363,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"validationDescription\",\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 378,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              name: \"Description\",\n              value: values.Description,\n              onChange: handleChange,\n              isInvalid: touched.Description && !!errors.Description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 379,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n              type: \"invalid\",\n              children: errors.Description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 386,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 377,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"validationQuantity\",\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Quantity\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 392,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              name: \"Quantity\",\n              value: values.Quantity,\n              onChange: handleChange,\n              isInvalid: touched.Quantity && !!errors.Quantity\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 393,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n              type: \"invalid\",\n              children: errors.Quantity\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 400,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 391,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"validationCategory\",\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Category\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 406,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              as: \"select\",\n              name: \"Category\",\n              value: values.Category // Directly use values.Category\n              ,\n              onChange: handleChange,\n              isInvalid: touched.Category && !!errors.Category,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select Category...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 414,\n                columnNumber: 19\n              }, this), categories.map(category => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: category._id,\n                children: category.CategoryName\n              }, category._id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 416,\n                columnNumber: 21\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 407,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n              type: \"invalid\",\n              children: errors.Category\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 421,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 405,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"validationSubCategory\",\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Subcategory\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 427,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              as: \"select\",\n              name: \"SubCategory\",\n              value: SubCategory // Directly use values.SubCategory\n              ,\n              onChange: handleChange,\n              isInvalid: touched.SubCategory && !!errors.SubCategory,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select Subcategory...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 435,\n                columnNumber: 19\n              }, this), subCategories.map(subcategory => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: subcategory._id,\n                children: subcategory.subcategory\n              }, subcategory._id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 437,\n                columnNumber: 21\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 428,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n              type: \"invalid\",\n              children: errors.SubCategory\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 442,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 426,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"validationBrand\",\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Brand\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 448,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              name: \"Brand\",\n              value: values.Brand,\n              onChange: handleChange,\n              isInvalid: touched.Brand && !!errors.Brand\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 449,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n              type: \"invalid\",\n              children: errors.Brand\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 456,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 447,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            className: \"mx-auto d-block\",\n            type: \"submit\",\n            children: \"Update Product\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 461,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(ProductUpdate, \"RJEEMURCqb4T/y5+7tpq8u5Nb1g=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = ProductUpdate;\nexport default ProductUpdate;\nvar _c;\n$RefreshReg$(_c, \"ProductUpdate\");","map":{"version":3,"names":["React","useState","useEffect","Button","Form","Formik","yup","Navigation","Axios","useParams","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","schema","object","shape","ProductName","string","required","Price","number","typeError","Quantity","Category","SubCategory","Brand","ProductUpdate","_s","productId","navigate","categories","setCategories","subCategories","setSubCategories","initialValues","setInitialValues","Description","fetchCategories","response","get","data","error","console","fetchSubCategories","fetchProduct","productData","_id","handleFormSubmit","values","put","log","children","fileName","_jsxFileName","lineNumber","columnNumber","className","validationSchema","onSubmit","enableReinitialize","handleSubmit","handleChange","touched","errors","noValidate","Group","controlId","Label","Control","type","name","value","onChange","isInvalid","Feedback","as","map","category","CategoryName","subcategory","_c","$RefreshReg$"],"sources":["C:/Users/Pandi Eswaran/projects/Shopify/admin_frontend/src/Pages/ProductUpdate.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { Button, Form } from 'react-bootstrap';\r\n// import { Formik } from 'formik';\r\n// import * as yup from 'yup';\r\n// import Navigation from '../Components/Nav';\r\n// import Axios from 'axios';\r\n// import { useParams, useNavigate } from 'react-router-dom';\r\n// import '../Pages/ProductAdd.css';\r\n\r\n// const schema = yup.object().shape({\r\n//   ProductName: yup.string().required('Product Name is required'),\r\n//   Price: yup.number().required('Price is required').typeError('Price must be a number'),\r\n//   Quantity: yup.number().required('Quantity is required').typeError('Quantity must be a number'),\r\n//   Category: yup.string().required('Category is required'),\r\n//   SubCategory: yup.string().required('Subcategory is required'),\r\n//   Brand: yup.string().required('Brand is required'),\r\n// });\r\n\r\n// function ProductUpdate() {\r\n//   const { productId } = useParams(); // Fetching productId from URL params\r\n//   const navigate = useNavigate();\r\n\r\n//   const [categories, setCategories] = useState([]);\r\n//   const [subCategories, setSubCategories] = useState([]);\r\n//   const [selectedCategory, setSelectedCategory] = useState('');\r\n\r\n\r\n//   // Fetch Categories\r\n//   useEffect(() => {\r\n//     fetchCategories();\r\n//   }, []);\r\n\r\n//   const fetchCategories = async () => {\r\n//     try {\r\n//       const response = await Axios.get('http://localhost:8000/category');\r\n//       setCategories(response.data);\r\n//     } catch (error) {\r\n//       console.error('Error fetching categories:', error);\r\n//     }\r\n//   };\r\n\r\n//   // Fetch Subcategories\r\n//   useEffect(() => {\r\n//     const fetchSubCategories = async () => {\r\n//       try {\r\n//         const response = await Axios.get('http://localhost:8000/subcategory');\r\n//         setSubCategories(response.data);\r\n//         console.log(subCategories)\r\n//       } catch (error) {\r\n//         console.error('Error fetching subcategories:', error);\r\n//       }\r\n//     };\r\n\r\n//     fetchSubCategories();\r\n//   }, []);\r\n\r\n//   const [initialValues, setInitialValues] = useState({\r\n//     ProductName: '',\r\n//     Price: '',\r\n//     Description: '',\r\n//     Quantity: '',\r\n//     Category: '',\r\n//     SubCategory: '',\r\n//     Brand: ''\r\n//   });\r\n\r\n//   useEffect(() => {\r\n//     const fetchProduct = async () => {\r\n//       try {\r\n//         const response = await Axios.get(`http://localhost:8000/products/${productId}`);\r\n//         const productData = response.data;\r\n//         setInitialValues({\r\n//           ProductName: productData.ProductName,\r\n//           Price: productData.Price,\r\n//           Description: productData.Description,\r\n//           Quantity: productData.Quantity,\r\n//           Category: productData.Category._id,\r\n//           SubCategory: productData.SubCategory._id,\r\n//           Brand: productData.Brand\r\n//         });\r\n//       } catch (error) {\r\n//         console.error('Error fetching product:', error);\r\n//       }\r\n//     };\r\n\r\n//     fetchProduct();\r\n//   }, [productId]);\r\n\r\n//   const handleFormSubmit = async (values) => {\r\n//     try {\r\n//       const response = await Axios.put(`http://localhost:8000/products/${productId}`, values);\r\n//       console.log('Product updated successfully:', response.data);\r\n//       navigate('/home'); // Redirect to product list page after successful update\r\n//     } catch (error) {\r\n//       console.error('Error updating product:', error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       <Navigation />\r\n//       <div className=\"pcenter-form\">\r\n//         <Formik\r\n//           initialValues={initialValues}\r\n//           validationSchema={schema}\r\n//           onSubmit={handleFormSubmit}\r\n//           enableReinitialize // Allows form to reinitialize with new initialValues\r\n//         >\r\n//           {({ handleSubmit, handleChange, values, touched, errors, setFieldValue }) => (\r\n//             <Form noValidate onSubmit={handleSubmit} className=\"pform\">\r\n//               <h4 className=\"text-center\">Edit Product</h4>\r\n\r\n//               <Form.Group controlId=\"validationProductName\" className=\"mb-3\">\r\n//                 <Form.Label>Product Name</Form.Label>\r\n//                 <Form.Control\r\n//                   type=\"text\"\r\n//                   name=\"ProductName\"\r\n//                   value={values.ProductName}\r\n//                   onChange={handleChange}\r\n//                   isInvalid={touched.ProductName && !!errors.ProductName}\r\n//                 />\r\n//                 <Form.Control.Feedback type=\"invalid\">\r\n//                   {errors.ProductName}\r\n//                 </Form.Control.Feedback>\r\n//               </Form.Group>\r\n\r\n//               <Form.Group controlId=\"validationPrice\" className=\"mb-3\">\r\n//                 <Form.Label>Price</Form.Label>\r\n//                 <Form.Control\r\n//                   type=\"text\"\r\n//                   name=\"Price\"\r\n//                   value={values.Price}\r\n//                   onChange={handleChange}\r\n//                   isInvalid={touched.Price && !!errors.Price}\r\n//                 />\r\n//                 <Form.Control.Feedback type=\"invalid\">\r\n//                   {errors.Price}\r\n//                 </Form.Control.Feedback>\r\n//               </Form.Group>\r\n\r\n//               <Form.Group controlId=\"validationDescription\" className=\"mb-3\">\r\n//                 <Form.Label>Description</Form.Label>\r\n//                 <Form.Control\r\n//                   type=\"text\"\r\n//                   name=\"Description\"\r\n//                   value={values.Description}\r\n//                   onChange={handleChange}\r\n//                   isInvalid={touched.Description && !!errors.Description}\r\n//                 />\r\n//                 <Form.Control.Feedback type=\"invalid\">\r\n//                   {errors.Description}\r\n//                 </Form.Control.Feedback>\r\n//               </Form.Group>\r\n\r\n//               <Form.Group controlId=\"validationQuantity\" className=\"mb-3\">\r\n//                 <Form.Label>Quantity</Form.Label>\r\n//                 <Form.Control\r\n//                   type=\"text\"\r\n//                   name=\"Quantity\"\r\n//                   value={values.Quantity}\r\n//                   onChange={handleChange}\r\n//                   isInvalid={touched.Quantity && !!errors.Quantity}\r\n//                 />\r\n//                 <Form.Control.Feedback type=\"invalid\">\r\n//                   {errors.Quantity}\r\n//                 </Form.Control.Feedback>\r\n//               </Form.Group>\r\n\r\n//               <Form.Group controlId=\"validationCategory\" className=\"mb-3\">\r\n//                 <Form.Label>Category</Form.Label>\r\n//                 <Form.Control\r\n//                   as=\"select\"\r\n//                   name=\"Category\"\r\n//                   value={values.selectedCategory} //\r\n//                   onChange={(e) => {\r\n//                     handleChange(e);\r\n//                     setSelectedCategory(e.target.value); // Update selected category\r\n//                   }}\r\n//                   isInvalid={touched.Category && !!errors.Category}\r\n//                 >\r\n//                   <option value=\"\">Select Category...</option>\r\n//                   {categories.map(category => (\r\n//                     <option key={category._id} value={category._id}>\r\n//                       {category.CategoryName}\r\n//                     </option>\r\n//                   ))}\r\n//                 </Form.Control>\r\n//                 <Form.Control.Feedback type=\"invalid\">\r\n//                   {errors.Category}\r\n//                 </Form.Control.Feedback>\r\n//               </Form.Group>\r\n\r\n//               <Form.Group controlId=\"validationSubCategory\" className=\"mb-3\">\r\n//                 <Form.Label>Subcategory</Form.Label>\r\n//                 <Form.Control\r\n//                   as=\"select\"\r\n//                   name=\"SubCategory\"\r\n//                   value={values.SubCategory}\r\n//                   onChange={handleChange}\r\n//                   isInvalid={touched.SubCategory && !!errors.SubCategory}\r\n//                 >\r\n//                   <option value=\"\">Select Subcategory...</option>\r\n//                   {subCategories.map(subcategory => (\r\n//                     <option key={subcategory._id} value={subcategory._id}>\r\n//                       {subcategory.subcategory}\r\n//                     </option>\r\n//                   ))}\r\n//                 </Form.Control>\r\n//                 <Form.Control.Feedback type=\"invalid\">\r\n//                   {errors.SubCategory}\r\n//                 </Form.Control.Feedback>\r\n//               </Form.Group>\r\n\r\n\r\n//               <Form.Group controlId=\"validationBrand\" className=\"mb-3\">\r\n//                 <Form.Label>Brand</Form.Label>\r\n//                 <Form.Control\r\n//                   type=\"text\"\r\n//                   name=\"Brand\"\r\n//                   value={values.Brand}\r\n//                   onChange={handleChange}\r\n//                   isInvalid={touched.Brand && !!errors.Brand}\r\n//                 />\r\n//                 <Form.Control.Feedback type=\"invalid\">\r\n//                   {errors.Brand}\r\n//                 </Form.Control.Feedback>\r\n//               </Form.Group>\r\n\r\n//               <Button className=\"mx-auto d-block\" type=\"submit\">Update Product</Button>\r\n//             </Form>\r\n//           )}\r\n//         </Formik>\r\n//       </div>\r\n//     </>\r\n//   );\r\n// }\r\n\r\n// export default ProductUpdate;\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Button, Form } from 'react-bootstrap';\r\nimport { Formik } from 'formik';\r\nimport * as yup from 'yup';\r\nimport Navigation from '../Components/Nav';\r\nimport Axios from 'axios';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport '../Pages/ProductAdd.css';\r\n\r\nconst schema = yup.object().shape({\r\n  ProductName: yup.string().required('Product Name is required'),\r\n  Price: yup.number().required('Price is required').typeError('Price must be a number'),\r\n  Quantity: yup.number().required('Quantity is required').typeError('Quantity must be a number'),\r\n  Category: yup.string().required('Category is required'),\r\n  SubCategory: yup.string().required('Subcategory is required'),\r\n  Brand: yup.string().required('Brand is required'),\r\n});\r\n\r\nfunction ProductUpdate() {\r\n  const { productId } = useParams(); // Fetching productId from URL params\r\n  const navigate = useNavigate();\r\n\r\n  const [categories, setCategories] = useState([]);\r\n  const [subCategories, setSubCategories] = useState([]);\r\n  const [initialValues, setInitialValues] = useState({\r\n    ProductName: '',\r\n    Price: '',\r\n    Description: '',\r\n    Quantity: '',\r\n    Category: '',\r\n    SubCategory: '',\r\n    Brand: ''\r\n  });\r\n\r\n  // Fetch Categories\r\n  useEffect(() => {\r\n    const fetchCategories = async () => {\r\n      try {\r\n        const response = await Axios.get('http://localhost:8000/category');\r\n        setCategories(response.data);\r\n      } catch (error) {\r\n        console.error('Error fetching categories:', error);\r\n      }\r\n    };\r\n\r\n    fetchCategories();\r\n  }, []);\r\n\r\n  // Fetch Subcategories\r\n  useEffect(() => {\r\n    const fetchSubCategories = async () => {\r\n      try {\r\n        const response = await Axios.get('http://localhost:8000/subcategory');\r\n        setSubCategories(response.data);\r\n      } catch (error) {\r\n        console.error('Error fetching subcategories:', error);\r\n      }\r\n    };\r\n\r\n    fetchSubCategories();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchProduct = async () => {\r\n      try {\r\n        const response = await Axios.get(`http://localhost:8000/products/${productId}`);\r\n        const productData = response.data;\r\n        setInitialValues({\r\n          ProductName: productData.ProductName,\r\n          Price: productData.Price,\r\n          Description: productData.Description,\r\n          Quantity: productData.Quantity,\r\n          Category: productData.Category ? productData.Category._id : '',\r\n          SubCategory: productData.SubCategory ? productData.SubCategory._id : '',\r\n          Brand: productData.Brand\r\n        });\r\n      } catch (error) {\r\n        console.error('Error fetching product:', error);\r\n      }\r\n    };\r\n\r\n    fetchProduct();\r\n  }, [productId]);\r\n\r\n  const handleFormSubmit = async (values) => {\r\n    try {\r\n      const response = await Axios.put(`http://localhost:8000/products/${productId}`, values);\r\n      console.log('Product updated successfully:', response.data);\r\n      navigate('/home'); // Redirect to product list page after successful update\r\n    } catch (error) {\r\n      console.error('Error updating product:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Navigation />\r\n      <div className=\"pcenter-form\">\r\n        <Formik\r\n          initialValues={initialValues}\r\n          validationSchema={schema}\r\n          onSubmit={handleFormSubmit}\r\n          enableReinitialize // Allows form to reinitialize with new initialValues\r\n        >\r\n          {({ handleSubmit, handleChange, values, touched, errors }) => (\r\n            <Form noValidate onSubmit={handleSubmit} className=\"pform\">\r\n              <h4 className=\"text-center\">Edit Product</h4>\r\n\r\n              <Form.Group controlId=\"validationProductName\" className=\"mb-3\">\r\n                <Form.Label>Product Name</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  name=\"ProductName\"\r\n                  value={values.ProductName}\r\n                  onChange={handleChange}\r\n                  isInvalid={touched.ProductName && !!errors.ProductName}\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                  {errors.ProductName}\r\n                </Form.Control.Feedback>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId=\"validationPrice\" className=\"mb-3\">\r\n                <Form.Label>Price</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  name=\"Price\"\r\n                  value={values.Price}\r\n                  onChange={handleChange}\r\n                  isInvalid={touched.Price && !!errors.Price}\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                  {errors.Price}\r\n                </Form.Control.Feedback>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId=\"validationDescription\" className=\"mb-3\">\r\n                <Form.Label>Description</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  name=\"Description\"\r\n                  value={values.Description}\r\n                  onChange={handleChange}\r\n                  isInvalid={touched.Description && !!errors.Description}\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                  {errors.Description}\r\n                </Form.Control.Feedback>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId=\"validationQuantity\" className=\"mb-3\">\r\n                <Form.Label>Quantity</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  name=\"Quantity\"\r\n                  value={values.Quantity}\r\n                  onChange={handleChange}\r\n                  isInvalid={touched.Quantity && !!errors.Quantity}\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                  {errors.Quantity}\r\n                </Form.Control.Feedback>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId=\"validationCategory\" className=\"mb-3\">\r\n                <Form.Label>Category</Form.Label>\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  name=\"Category\"\r\n                  value={values.Category} // Directly use values.Category\r\n                  onChange={handleChange}\r\n                  isInvalid={touched.Category && !!errors.Category}\r\n                >\r\n                  <option value=\"\">Select Category...</option>\r\n                  {categories.map(category => (\r\n                    <option key={category._id} value={category._id}>\r\n                      {category.CategoryName}\r\n                    </option>\r\n                  ))}\r\n                </Form.Control>\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                  {errors.Category}\r\n                </Form.Control.Feedback>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId=\"validationSubCategory\" className=\"mb-3\">\r\n                <Form.Label>Subcategory</Form.Label>\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  name=\"SubCategory\"\r\n                  value={SubCategory} // Directly use values.SubCategory\r\n                  onChange={handleChange}\r\n                  isInvalid={touched.SubCategory && !!errors.SubCategory}\r\n                >\r\n                  <option value=\"\">Select Subcategory...</option>\r\n                  {subCategories.map(subcategory => (\r\n                    <option key={subcategory._id} value={subcategory._id}>\r\n                      {subcategory.subcategory}\r\n                    </option>\r\n                  ))}\r\n                </Form.Control>\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                  {errors.SubCategory}\r\n                </Form.Control.Feedback>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId=\"validationBrand\" className=\"mb-3\">\r\n                <Form.Label>Brand</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  name=\"Brand\"\r\n                  value={values.Brand}\r\n                  onChange={handleChange}\r\n                  isInvalid={touched.Brand && !!errors.Brand}\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                  {errors.Brand}\r\n                </Form.Control.Feedback>\r\n              </Form.Group>\r\n\r\n              <Button className=\"mx-auto d-block\" type=\"submit\">Update Product</Button>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ProductUpdate;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,MAAM,EAAEC,IAAI,QAAQ,iBAAiB;AAC9C,SAASC,M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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}