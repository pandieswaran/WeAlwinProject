{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pandi Eswaran\\\\projects\\\\Shopify\\\\admin_frontend\\\\src\\\\Pages\\\\CategoryAdd.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Form, Button, Modal, Table, FormText } from 'react-bootstrap';\nimport Navigation from '../Components/Nav';\nimport Axios from 'axios';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction CategoryAdd() {\n  _s();\n  const [categoryName, setCategoryName] = useState('');\n  const [newCategoryName, setNewCategoryName] = useState('');\n  const [errors, setErrors] = useState({});\n  const [error, setError] = useState('');\n  const [showOtpModal, setShowOtpModal] = useState(false);\n  const [categories, setCategories] = useState([]);\n  const [currentCategoryId, setCurrentCategoryId] = useState(null); // State for current category ID\n\n  useEffect(() => {\n    fetchCategories();\n  }, []);\n  const validateForm = () => {\n    const newErrors = {};\n    if (!newCategoryId) {\n      newErrors.newCategoryId = 'Category is required';\n    }\n    return newErrors;\n  };\n  const fetchCategories = async () => {\n    try {\n      const response = await Axios.get('http://localhost:8000/category');\n      setCategories(response.data);\n    } catch (error) {\n      console.error('Error fetching categories:', error);\n    }\n  };\n  const handleInputChange = event => {\n    setCategoryName(event.target.value);\n  };\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n    const newErrors = {};\n    if (!categoryName) newErrors.categoryName = 'Category is required';\n    if (Object.keys(newErrors).length > 0) {\n      setErrors(newErrors);\n      return;\n    }\n    try {\n      const response = await Axios.post('http://localhost:8000/createCategory', {\n        CategoryName: categoryName\n      });\n      console.log('Form submitted successfully:', response.data);\n      setCategoryName('');\n      setError('');\n      setErrors({});\n      fetchCategories(); // Refresh categories list\n    } catch (error) {\n      console.error('Error submitting form:', error);\n      setError('Error submitting form. Please try again.');\n    }\n  };\n  const handleUpdate = async categoryId => {\n    setErrors({});\n    const categoryToUpdate = categories.find(category => category._id === categoryId);\n    if (categoryToUpdate) {\n      setNewCategoryName(categoryToUpdate.CategoryName); // Set the current category name in the modal input\n      setCurrentCategoryId(categoryId); // Set the current category ID\n      setShowOtpModal(true); // Show modal for updating category name\n    }\n  };\n  const resetPasswordHandler = async () => {\n    console.log(currentCategoryId);\n    try {\n      await Axios.put(`http://localhost:8000/category/${currentCategoryId}`, {\n        CategoryName: newCategoryName\n      });\n      console.log('Category updated successfully');\n      setShowOtpModal(false); // Close modal after successful update\n      setNewCategoryName(''); // Clear input field after update\n      fetchCategories(); // Refresh categories list\n    } catch (error) {\n      console.error('Error updating category:', error);\n      // Handle error updating category\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pcenter-form\",\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        noValidate: true,\n        onSubmit: handleFormSubmit,\n        className: \"pform\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"text-center\",\n          children: \"Add Category\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"validationCategoryName\",\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Category Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            name: \"CategoryName\",\n            value: categoryName,\n            onChange: handleInputChange,\n            required: true,\n            isInvalid: !!errors.categoryName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }, this), errors.categoryName && /*#__PURE__*/_jsxDEV(FormText, {\n            style: {\n              color: 'red'\n            },\n            children: errors.categoryName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-danger mb-3\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: \"mx-auto d-block\",\n          type: \"submit\",\n          children: \"Submit Form\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: showOtpModal,\n      onHide: () => setShowOtpModal(false),\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"Update Category Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          children: /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"formNewCategoryName\",\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"New Category Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              value: newCategoryName,\n              onChange: e => setNewCategoryName(e.target.value),\n              required: true,\n              isInvalid: !!errors.categoryName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n              type: \"invalid\",\n              children: errors.newSubCategoryName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          onClick: () => setShowOtpModal(false),\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          onClick: resetPasswordHandler,\n          children: \"Update Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Category List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        striped: true,\n        bordered: true,\n        hover: true,\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Category Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Actions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: categories.map(category => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: category.CategoryName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                onClick: () => handleUpdate(category._id),\n                children: \"Update\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 17\n            }, this)]\n          }, category._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(CategoryAdd, \"wX8pqgNMXgrEn2QIOZt5VhourB8=\");\n_c = CategoryAdd;\nexport default CategoryAdd;\n\n// import React, { useState, useEffect } from 'react';\n// import { Button, Form } from 'react-bootstrap';\n// import Navigation from '../Components/Nav';\n// import '../Pages/ProductAdd.css';\n// import Axios from 'axios';\n// import Table from 'react-bootstrap/Table';\n\n// function CategoryAdd() {\n//   const [categoryName, setCategoryName] = useState('');\n//   const [error, setError] = useState('');\n//   const [categories, setCategories] = useState([]);\n//   const [isUpdateMode, setIsUpdateMode] = useState(false);\n//   const [currentCategoryId, setCurrentCategoryId] = useState(null);\n\n//   // Fetch categories on component mount\n//   useEffect(() => {\n//     fetchCategories();\n//   }, []);\n\n//   const fetchCategories = async () => {\n//     try {\n//       const response = await Axios.get('http://localhost:8000/category');\n//       setCategories(response.data);\n//     } catch (error) {\n//       console.error('Error fetching categories:', error);\n//     }\n//   };\n\n//   const handleInputChange = (event) => {\n//     setCategoryName(event.target.value);\n//   };\n\n//   const handleFormSubmit = async (event) => {\n//     event.preventDefault();\n\n//     try {\n//       if (isUpdateMode && currentCategoryId) {\n//         // Update existing category\n//         await Axios.put(`http://localhost:8000/category/${currentCategoryId}`, {\n//           CategoryName: categoryName\n//         });\n//         console.log('Category updated successfully');\n//         setIsUpdateMode(false); // Exit update mode\n//         setCurrentCategoryId(null); // Clear current category ID\n//       } else {\n//         // Add new category\n//         await Axios.post('http://localhost:8000/createCategory', {\n//           CategoryName: categoryName\n//         });\n//         console.log('Category added successfully');\n//       }\n//       setCategoryName(''); // Clear input field after submission\n//       setError(''); // Clear any previous error\n//       fetchCategories(); // Refresh categories list\n//     } catch (error) {\n//       console.error('Error submitting form:', error);\n//       setError('Error submitting form. Please try again.'); // Generic error message\n//     }\n//   };\n\n//   const handleUpdate = (categoryId) => {\n//     // Set current category for update\n//     const categoryToUpdate = categories.find(category => category._id === categoryId);\n//     if (categoryToUpdate) {\n//       setCategoryName(categoryToUpdate.CategoryName);\n//       setIsUpdateMode(true);\n//       setCurrentCategoryId(categoryId);\n//     }\n//   };\n\n//   return (\n//     <>\n//       <Navigation />\n//       <div className=\"pcenter-form\">\n//         <Form noValidate onSubmit={handleFormSubmit} className=\"pform\">\n//           <h4 className=\"text-center\">{isUpdateMode ? 'Update Category' : 'Add Category'}</h4>\n//           <Form.Group controlId=\"validationCategoryName\" className=\"mb-3\">\n//             <Form.Label>Category Name</Form.Label>\n//             <Form.Control\n//               type=\"text\"\n//               name=\"CategoryName\"\n//               value={categoryName}\n//               onChange={handleInputChange}\n//               required\n//             />\n//           </Form.Group>\n//           {error && <div className=\"text-danger mb-3\">{error}</div>}\n//           <Button className=\"mx-auto d-block\" type=\"submit\">\n//             {isUpdateMode ? 'Update Category' : 'Add Category'}\n//           </Button>\n//         </Form>\n//       </div>\n//       <div>\n//         <h2>Category List</h2>\n//         <Table striped bordered hover>\n//           <thead>\n//             <tr>\n//               <th>Category Name</th>\n//               <th>Actions</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {categories.map(category => (\n//               <tr key={category._id}>\n//                 <td>{category.CategoryName}</td>\n//                 <td>\n//                   <Button onClick={() => handleUpdate(category._id)}>Update</Button>\n//                 </td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </Table>\n//       </div>\n//     </>\n//   );\n// }\n\n// export default CategoryAdd;\nvar _c;\n$RefreshReg$(_c, \"CategoryAdd\");","map":{"version":3,"names":["React","useState","useEffect","Form","Button","Modal","Table","FormText","Navigation","Axios","jsxDEV","_jsxDEV","Fragment","_Fragment","CategoryAdd","_s","categoryName","setCategoryName","newCategoryName","setNewCategoryName","errors","setErrors","error","setError","showOtpModal","setShowOtpModal","categories","setCategories","currentCategoryId","setCurrentCategoryId","fetchCategories","validateForm","newErrors","newCategoryId","response","get","data","console","handleInputChange","event","target","value","handleFormSubmit","preventDefault","Object","keys","length","post","CategoryName","log","handleUpdate","categoryId","categoryToUpdate","find","category","_id","resetPasswordHandler","put","children","fileName","_jsxFileName","lineNumber","columnNumber","className","noValidate","onSubmit","Group","controlId","Label","Control","type","name","onChange","required","isInvalid","style","color","show","onHide","Header","closeButton","Title","Body","e","Feedback","newSubCategoryName","Footer","variant","onClick","striped","bordered","hover","map","_c","$RefreshReg$"],"sources":["C:/Users/Pandi Eswaran/projects/Shopify/admin_frontend/src/Pages/CategoryAdd.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Form, Button, Modal, Table, FormText } from 'react-bootstrap';\r\nimport Navigation from '../Components/Nav';\r\nimport Axios from 'axios';\r\n\r\nfunction CategoryAdd() {\r\n  const [categoryName, setCategoryName] = useState('');\r\n  const [newCategoryName, setNewCategoryName] = useState('');\r\n  const [errors, setErrors] = useState({});\r\n  const [error, setError] = useState('');\r\n  const [showOtpModal, setShowOtpModal] = useState(false);\r\n  const [categories, setCategories] = useState([]);\r\n  const [currentCategoryId, setCurrentCategoryId] = useState(null); // State for current category ID\r\n\r\n  useEffect(() => {\r\n    fetchCategories();\r\n  }, []);\r\n\r\n  const validateForm = () => {\r\n    const newErrors = {};\r\n    if (!newCategoryId) {\r\n        newErrors.newCategoryId = 'Category is required';\r\n    }\r\n    \r\n    return newErrors;\r\n};\r\n\r\n  const fetchCategories = async () => {\r\n    try {\r\n      const response = await Axios.get('http://localhost:8000/category');\r\n      setCategories(response.data);\r\n    } catch (error) {\r\n      console.error('Error fetching categories:', error);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (event) => {\r\n    setCategoryName(event.target.value);\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    const newErrors = {};\r\n    if (!categoryName) newErrors.categoryName = 'Category is required';\r\n    if (Object.keys(newErrors).length > 0) {\r\n      setErrors(newErrors);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await Axios.post('http://localhost:8000/createCategory', {\r\n        CategoryName: categoryName\r\n      });\r\n      console.log('Form submitted successfully:', response.data);\r\n      setCategoryName('');\r\n      setError('');\r\n      setErrors({});\r\n      fetchCategories(); // Refresh categories list\r\n    } catch (error) {\r\n      console.error('Error submitting form:', error);\r\n      setError('Error submitting form. Please try again.');\r\n    }\r\n  };\r\n\r\n  const handleUpdate = async (categoryId) => {\r\n    setErrors({});\r\n    const categoryToUpdate = categories.find(category => category._id === categoryId);\r\n    if (categoryToUpdate) {\r\n      setNewCategoryName(categoryToUpdate.CategoryName); // Set the current category name in the modal input\r\n      setCurrentCategoryId(categoryId); // Set the current category ID\r\n      setShowOtpModal(true); // Show modal for updating category name\r\n    }\r\n  };\r\n\r\n\r\n  const resetPasswordHandler = async () => {\r\n    console.log(currentCategoryId)\r\n    try {\r\n      await Axios.put(`http://localhost:8000/category/${currentCategoryId}`, {\r\n        CategoryName: newCategoryName\r\n      });\r\n      console.log('Category updated successfully');\r\n      setShowOtpModal(false); // Close modal after successful update\r\n      setNewCategoryName(''); // Clear input field after update\r\n      fetchCategories(); // Refresh categories list\r\n    } catch (error) {\r\n      console.error('Error updating category:', error);\r\n      // Handle error updating category\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Navigation />\r\n      <div className=\"pcenter-form\">\r\n        <Form noValidate onSubmit={handleFormSubmit} className=\"pform\">\r\n          <h4 className=\"text-center\">Add Category</h4>\r\n          <Form.Group controlId=\"validationCategoryName\" className=\"mb-3\">\r\n            <Form.Label>Category Name</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              name=\"CategoryName\"\r\n              value={categoryName}\r\n              onChange={handleInputChange}\r\n              required\r\n              isInvalid={!!errors.categoryName}\r\n            />\r\n            {errors.categoryName && <FormText style={{ color: 'red' }}>{errors.categoryName}</FormText>}\r\n          </Form.Group>\r\n          {error && <div className=\"text-danger mb-3\">{error}</div>}\r\n          <Button className=\"mx-auto d-block\" type=\"submit\">Submit Form</Button>\r\n        </Form>\r\n      </div>\r\n\r\n      {/* Modal for updating category name */}\r\n      <Modal show={showOtpModal} onHide={() => setShowOtpModal(false)}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Update Category Name</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form>\r\n            <Form.Group controlId=\"formNewCategoryName\" className=\"mb-3\">\r\n              <Form.Label>New Category Name</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                value={newCategoryName}\r\n                onChange={(e) => setNewCategoryName(e.target.value)}\r\n                required\r\n                isInvalid={!!errors.categoryName}\r\n              />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                {errors.newSubCategoryName}\r\n              </Form.Control.Feedback>\r\n            </Form.Group>\r\n          </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={() => setShowOtpModal(false)}>\r\n            Close\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={resetPasswordHandler}>\r\n            Update Name\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n\r\n      <div>\r\n        <h2>Category List</h2>\r\n        <Table striped bordered hover>\r\n          <thead>\r\n            <tr>\r\n              <th>Category Name</th>\r\n              <th>Actions</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {categories.map(category => (\r\n              <tr key={category._id}>\r\n                <td>{category.CategoryName}</td>\r\n                <td>\r\n                  <Button onClick={() => handleUpdate(category._id)}>Update</Button>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CategoryAdd;\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import { Button, Form } from 'react-bootstrap';\r\n// import Navigation from '../Components/Nav';\r\n// import '../Pages/ProductAdd.css';\r\n// import Axios from 'axios';\r\n// import Table from 'react-bootstrap/Table';\r\n\r\n// function CategoryAdd() {\r\n//   const [categoryName, setCategoryName] = useState('');\r\n//   const [error, setError] = useState('');\r\n//   const [categories, setCategories] = useState([]);\r\n//   const [isUpdateMode, setIsUpdateMode] = useState(false);\r\n//   const [currentCategoryId, setCurrentCategoryId] = useState(null);\r\n\r\n//   // Fetch categories on component mount\r\n//   useEffect(() => {\r\n//     fetchCategories();\r\n//   }, []);\r\n\r\n//   const fetchCategories = async () => {\r\n//     try {\r\n//       const response = await Axios.get('http://localhost:8000/category');\r\n//       setCategories(response.data);\r\n//     } catch (error) {\r\n//       console.error('Error fetching categories:', error);\r\n//     }\r\n//   };\r\n\r\n//   const handleInputChange = (event) => {\r\n//     setCategoryName(event.target.value);\r\n//   };\r\n\r\n//   const handleFormSubmit = async (event) => {\r\n//     event.preventDefault();\r\n\r\n//     try {\r\n//       if (isUpdateMode && currentCategoryId) {\r\n//         // Update existing category\r\n//         await Axios.put(`http://localhost:8000/category/${currentCategoryId}`, {\r\n//           CategoryName: categoryName\r\n//         });\r\n//         console.log('Category updated successfully');\r\n//         setIsUpdateMode(false); // Exit update mode\r\n//         setCurrentCategoryId(null); // Clear current category ID\r\n//       } else {\r\n//         // Add new category\r\n//         await Axios.post('http://localhost:8000/createCategory', {\r\n//           CategoryName: categoryName\r\n//         });\r\n//         console.log('Category added successfully');\r\n//       }\r\n//       setCategoryName(''); // Clear input field after submission\r\n//       setError(''); // Clear any previous error\r\n//       fetchCategories(); // Refresh categories list\r\n//     } catch (error) {\r\n//       console.error('Error submitting form:', error);\r\n//       setError('Error submitting form. Please try again.'); // Generic error message\r\n//     }\r\n//   };\r\n\r\n//   const handleUpdate = (categoryId) => {\r\n//     // Set current category for update\r\n//     const categoryToUpdate = categories.find(category => category._id === categoryId);\r\n//     if (categoryToUpdate) {\r\n//       setCategoryName(categoryToUpdate.CategoryName);\r\n//       setIsUpdateMode(true);\r\n//       setCurrentCategoryId(categoryId);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       <Navigation />\r\n//       <div className=\"pcenter-form\">\r\n//         <Form noValidate onSubmit={handleFormSubmit} className=\"pform\">\r\n//           <h4 className=\"text-center\">{isUpdateMode ? 'Update Category' : 'Add Category'}</h4>\r\n//           <Form.Group controlId=\"validationCategoryName\" className=\"mb-3\">\r\n//             <Form.Label>Category Name</Form.Label>\r\n//             <Form.Control\r\n//               type=\"text\"\r\n//               name=\"CategoryName\"\r\n//               value={categoryName}\r\n//               onChange={handleInputChange}\r\n//               required\r\n//             />\r\n//           </Form.Group>\r\n//           {error && <div className=\"text-danger mb-3\">{error}</div>}\r\n//           <Button className=\"mx-auto d-block\" type=\"submit\">\r\n//             {isUpdateMode ? 'Update Category' : 'Add Category'}\r\n//           </Button>\r\n//         </Form>\r\n//       </div>\r\n//       <div>\r\n//         <h2>Category List</h2>\r\n//         <Table striped bordered hover>\r\n//           <thead>\r\n//             <tr>\r\n//               <th>Category Name</th>\r\n//               <th>Actions</th>\r\n//             </tr>\r\n//           </thead>\r\n//           <tbody>\r\n//             {categories.map(category => (\r\n//               <tr key={category._id}>\r\n//                 <td>{category.CategoryName}</td>\r\n//                 <td>\r\n//                   <Button onClick={() => handleUpdate(category._id)}>Update</Button>\r\n//                 </td>\r\n//               </tr>\r\n//             ))}\r\n//           </tbody>\r\n//         </Table>\r\n//       </div>\r\n//     </>\r\n//   );\r\n// }\r\n\r\n// export default CategoryAdd;\r\n\r\n"],"mappings":"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,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA,eACN,CAAC;AAEP;AAAC/C,EAAA,CApKQD,WAAW;AAAA+E,EAAA,GAAX/E,WAAW;AAsKpB,eAAeA,WAAW;;AAK1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAA+E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}