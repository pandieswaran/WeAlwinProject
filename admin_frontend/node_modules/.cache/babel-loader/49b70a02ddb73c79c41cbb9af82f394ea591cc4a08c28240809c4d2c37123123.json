{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pandi Eswaran\\\\projects\\\\Shopify\\\\admin_frontend\\\\src\\\\Pages\\\\CategoryAdd.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Button, Form } from 'react-bootstrap';\nimport Navigation from '../Components/Nav';\nimport '../Pages/ProductAdd.css';\nimport Axios from 'axios';\nimport Table from 'react-bootstrap/Table';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction CategoryAdd() {\n  _s();\n  const [categoryName, setCategoryName] = useState('');\n  const [error, setError] = useState('');\n  const handleInputChange = event => {\n    setCategoryName(event.target.value);\n    console.log(categoryName);\n  };\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n    try {\n      const response = await Axios.post('http://localhost:8000/createCategory', {\n        CategoryName: categoryName\n      });\n      console.log('Form submitted successfully:', response.data);\n      setCategoryName(''); // Clear input field after successful submission\n      setError(''); // Clear any previous error\n    } catch (error) {\n      console.error('Error submitting form:', error);\n      setError('Error submitting form. Please try again.'); // Generic error message\n    }\n  };\n\n  //View The Category Name:\n  const [category, setCategory] = useState([]);\n  useEffect(() => {\n    const fetchCategory = async () => {\n      try {\n        const response = await Axios.get('http://localhost:8000/category'); // Endpoint to fetch category\n        setCategory(response.data); // Set Category state with fetched data\n      } catch (error) {\n        console.error('Error fetching category:', error);\n      }\n    };\n    fetchCategory();\n  }, []);\n  const handleUpdate = async categoryid => {\n    console.log(categoryid);\n    try {\n      // const response = await Axios.get(`http://localhost:8000/category/${categoryid}`);\n      // const categoryData = response.data; // Assuming response.data contains product details\n      // console.log(categoryData)\n    } catch (error) {\n      console.error('Error fetching product for update:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pcenter-form\",\n      children: [/*#__PURE__*/_jsxDEV(Form, {\n        noValidate: true,\n        onSubmit: handleFormSubmit,\n        className: \"pform\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"text-center\",\n          children: \"Category Add Form\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n          controlId: \"validationCategoryName\",\n          className: \"mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n            children: \"Category Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n            type: \"text\",\n            name: \"CategoryName\",\n            value: categoryName,\n            onChange: handleInputChange,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-danger mb-3\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          className: \"mx-auto d-block\",\n          type: \"submit\",\n          children: \"Submit Form\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        show: showOtpModal,\n        onHide: () => setShowOtpModal(false),\n        children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n          closeButton: true,\n          children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n            children: \"Reset Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n              className: \"mb-3\",\n              controlId: \"formBasicOtp\",\n              children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                children: \"OTP\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n                type: \"text\",\n                placeholder: \"Enter OTP\",\n                onChange: e => setOtp(e.target.value),\n                value: otp\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n              className: \"mb-3\",\n              controlId: \"formBasicPassword\",\n              children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n                children: \"New Password\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n                type: \"password\",\n                placeholder: \"Enter new password\",\n                onChange: e => setNewPassword(e.target.value),\n                value: newPassword\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"secondary\",\n            onClick: () => setShowOtpModal(false),\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"primary\",\n            onClick: resetPasswordHandler,\n            children: \"Reset Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Category List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Table, {\n          striped: true,\n          bordered: true,\n          hover: true,\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Category Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: category.map(category => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: category.CategoryName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 131,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  onClick: () => handleUpdate(category._id),\n                  children: \"Update\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 133,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 132,\n                columnNumber: 29\n              }, this)]\n            }, category._id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 25\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(CategoryAdd, \"oXDFx3dxttBU1gi4PHDBV/juj9A=\");\n_c = CategoryAdd;\nexport default CategoryAdd;\n\n// import React, { useState, useEffect } from 'react';\n// import { Button, Form } from 'react-bootstrap';\n// import Navigation from '../Components/Nav';\n// import '../Pages/ProductAdd.css';\n// import Axios from 'axios';\n// import Table from 'react-bootstrap/Table';\n\n// function CategoryAdd() {\n//   const [categoryName, setCategoryName] = useState('');\n//   const [error, setError] = useState('');\n//   const [categories, setCategories] = useState([]);\n//   const [isUpdateMode, setIsUpdateMode] = useState(false);\n//   const [currentCategoryId, setCurrentCategoryId] = useState(null);\n\n//   // Fetch categories on component mount\n//   useEffect(() => {\n//     fetchCategories();\n//   }, []);\n\n//   const fetchCategories = async () => {\n//     try {\n//       const response = await Axios.get('http://localhost:8000/category');\n//       setCategories(response.data);\n//     } catch (error) {\n//       console.error('Error fetching categories:', error);\n//     }\n//   };\n\n//   const handleInputChange = (event) => {\n//     setCategoryName(event.target.value);\n//   };\n\n//   const handleFormSubmit = async (event) => {\n//     event.preventDefault();\n\n//     try {\n//       if (isUpdateMode && currentCategoryId) {\n//         // Update existing category\n//         await Axios.put(`http://localhost:8000/category/${currentCategoryId}`, {\n//           CategoryName: categoryName\n//         });\n//         console.log('Category updated successfully');\n//         setIsUpdateMode(false); // Exit update mode\n//         setCurrentCategoryId(null); // Clear current category ID\n//       } else {\n//         // Add new category\n//         await Axios.post('http://localhost:8000/createCategory', {\n//           CategoryName: categoryName\n//         });\n//         console.log('Category added successfully');\n//       }\n//       setCategoryName(''); // Clear input field after submission\n//       setError(''); // Clear any previous error\n//       fetchCategories(); // Refresh categories list\n//     } catch (error) {\n//       console.error('Error submitting form:', error);\n//       setError('Error submitting form. Please try again.'); // Generic error message\n//     }\n//   };\n\n//   const handleUpdate = (categoryId) => {\n//     // Set current category for update\n//     const categoryToUpdate = categories.find(category => category._id === categoryId);\n//     if (categoryToUpdate) {\n//       setCategoryName(categoryToUpdate.CategoryName);\n//       setIsUpdateMode(true);\n//       setCurrentCategoryId(categoryId);\n//     }\n//   };\n\n//   return (\n//     <>\n//       <Navigation />\n//       <div className=\"pcenter-form\">\n//         <Form noValidate onSubmit={handleFormSubmit} className=\"pform\">\n//           <h4 className=\"text-center\">{isUpdateMode ? 'Update Category' : 'Add Category'}</h4>\n//           <Form.Group controlId=\"validationCategoryName\" className=\"mb-3\">\n//             <Form.Label>Category Name</Form.Label>\n//             <Form.Control\n//               type=\"text\"\n//               name=\"CategoryName\"\n//               value={categoryName}\n//               onChange={handleInputChange}\n//               required\n//             />\n//           </Form.Group>\n//           {error && <div className=\"text-danger mb-3\">{error}</div>}\n//           <Button className=\"mx-auto d-block\" type=\"submit\">\n//             {isUpdateMode ? 'Update Category' : 'Add Category'}\n//           </Button>\n//         </Form>\n//       </div>\n//       <div>\n//         <h2>Category List</h2>\n//         <Table striped bordered hover>\n//           <thead>\n//             <tr>\n//               <th>Category Name</th>\n//               <th>Actions</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {categories.map(category => (\n//               <tr key={category._id}>\n//                 <td>{category.CategoryName}</td>\n//                 <td>\n//                   <Button onClick={() => handleUpdate(category._id)}>Update</Button>\n//                 </td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </Table>\n//       </div>\n//     </>\n//   );\n// }\n\n// export default CategoryAdd;\nvar _c;\n$RefreshReg$(_c, \"CategoryAdd\");","map":{"version":3,"names":["React","useState","useEffect","Button","Form","Navigation","Axios","Table","jsxDEV","_jsxDEV","Fragment","_Fragment","CategoryAdd","_s","categoryName","setCategoryName","error","setError","handleInputChange","event","target","value","console","log","handleFormSubmit","preventDefault","response","post","CategoryName","data","category","setCategory","fetchCategory","get","handleUpdate","categoryid","children","fileName","_jsxFileName","lineNumber","columnNumber","className","noValidate","onSubmit","Group","controlId","Label","Control","type","name","onChange","required","Modal","show","showOtpModal","onHide","setShowOtpModal","Header","closeButton","Title","Body","FormGroup","FormLabel","FormControl","placeholder","e","setOtp","otp","setNewPassword","newPassword","Footer","variant","onClick","resetPasswordHandler","striped","bordered","hover","map","_id","_c","$RefreshReg$"],"sources":["C:/Users/Pandi Eswaran/projects/Shopify/admin_frontend/src/Pages/CategoryAdd.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Button, Form } from 'react-bootstrap';\r\nimport Navigation from '../Components/Nav';\r\nimport '../Pages/ProductAdd.css';\r\nimport Axios from 'axios';\r\nimport Table from 'react-bootstrap/Table';\r\n\r\nfunction CategoryAdd() {\r\n  const [categoryName, setCategoryName] = useState('');\r\n  const [error, setError] = useState('');\r\n\r\n  const handleInputChange = (event) => {\r\n    setCategoryName(event.target.value);\r\n    console.log(categoryName)\r\n  };\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    try {\r\n      const response = await Axios.post('http://localhost:8000/createCategory', {\r\n        CategoryName: categoryName\r\n      });\r\n      console.log('Form submitted successfully:', response.data);\r\n      setCategoryName(''); // Clear input field after successful submission\r\n      setError(''); // Clear any previous error\r\n    } catch (error) {\r\n      console.error('Error submitting form:', error);\r\n      setError('Error submitting form. Please try again.'); // Generic error message\r\n    }\r\n  };\r\n\r\n\r\n  //View The Category Name:\r\n  const [category, setCategory] = useState([]);\r\n\r\n  useEffect(() => {\r\n      const fetchCategory = async () => {\r\n          try {\r\n              const response = await Axios.get('http://localhost:8000/category'); // Endpoint to fetch category\r\n              setCategory(response.data); // Set Category state with fetched data\r\n          } catch (error) {\r\n              console.error('Error fetching category:', error);\r\n          }\r\n      };\r\n\r\n      fetchCategory();\r\n  }, []);\r\n\r\n  const handleUpdate = async (categoryid) => {\r\n    console.log(categoryid)\r\n    try {\r\n        // const response = await Axios.get(`http://localhost:8000/category/${categoryid}`);\r\n        // const categoryData = response.data; // Assuming response.data contains product details\r\n        // console.log(categoryData)\r\n    } catch (error) {\r\n        console.error('Error fetching product for update:', error);\r\n    }\r\n};\r\n\r\n  return (\r\n    <>\r\n      <Navigation />\r\n      <div className=\"pcenter-form\">\r\n        <Form noValidate onSubmit={handleFormSubmit} className=\"pform\">\r\n          <h4 className=\"text-center\">Category Add Form</h4>\r\n          <Form.Group controlId=\"validationCategoryName\" className=\"mb-3\">\r\n            <Form.Label>Category Name</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              name=\"CategoryName\"\r\n              value={categoryName}\r\n              onChange={handleInputChange}\r\n              required\r\n            />\r\n          </Form.Group>\r\n          {error && <div className=\"text-danger mb-3\">{error}</div>}\r\n          <Button className=\"mx-auto d-block\" type=\"submit\">Submit Form</Button>\r\n        </Form>\r\n        <Modal show={showOtpModal} onHide={() => setShowOtpModal(false)}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Reset Password</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form>\r\n                        <FormGroup className=\"mb-3\" controlId=\"formBasicOtp\">\r\n                            <FormLabel>OTP</FormLabel>\r\n                            <FormControl \r\n                                type=\"text\" \r\n                                placeholder=\"Enter OTP\" \r\n                                onChange={(e) => setOtp(e.target.value)} \r\n                                value={otp} \r\n                            />\r\n                        </FormGroup>\r\n                        <FormGroup className=\"mb-3\" controlId=\"formBasicPassword\">\r\n                            <FormLabel>New Password</FormLabel>\r\n                            <FormControl \r\n                                type=\"password\" \r\n                                placeholder=\"Enter new password\" \r\n                                onChange={(e) => setNewPassword(e.target.value)} \r\n                                value={newPassword} \r\n                            />\r\n                        </FormGroup>\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={() => setShowOtpModal(false)}>\r\n                        Close\r\n                    </Button>\r\n                    <Button variant=\"primary\" onClick={resetPasswordHandler}>\r\n                        Reset Password\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n      </div>\r\n      <div>\r\n      <div>\r\n            <Navigation />\r\n            <h2\r\n            >Category List</h2>\r\n            <Table striped bordered hover>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Category Name</th>\r\n                        <th></th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {category.map(category => (\r\n                        <tr key={category._id}>\r\n                            <td>{category.CategoryName}</td>\r\n                            <td>\r\n                                <Button onClick={() => handleUpdate(category._id)}>Update</Button>\r\n                            </td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </Table>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CategoryAdd;\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import { Button, Form } from 'react-bootstrap';\r\n// import Navigation from '../Components/Nav';\r\n// import '../Pages/ProductAdd.css';\r\n// import Axios from 'axios';\r\n// import Table from 'react-bootstrap/Table';\r\n\r\n// function CategoryAdd() {\r\n//   const [categoryName, setCategoryName] = useState('');\r\n//   const [error, setError] = useState('');\r\n//   const [categories, setCategories] = useState([]);\r\n//   const [isUpdateMode, setIsUpdateMode] = useState(false);\r\n//   const [currentCategoryId, setCurrentCategoryId] = useState(null);\r\n\r\n//   // Fetch categories on component mount\r\n//   useEffect(() => {\r\n//     fetchCategories();\r\n//   }, []);\r\n\r\n//   const fetchCategories = async () => {\r\n//     try {\r\n//       const response = await Axios.get('http://localhost:8000/category');\r\n//       setCategories(response.data);\r\n//     } catch (error) {\r\n//       console.error('Error fetching categories:', error);\r\n//     }\r\n//   };\r\n\r\n//   const handleInputChange = (event) => {\r\n//     setCategoryName(event.target.value);\r\n//   };\r\n\r\n//   const handleFormSubmit = async (event) => {\r\n//     event.preventDefault();\r\n\r\n//     try {\r\n//       if (isUpdateMode && currentCategoryId) {\r\n//         // Update existing category\r\n//         await Axios.put(`http://localhost:8000/category/${currentCategoryId}`, {\r\n//           CategoryName: categoryName\r\n//         });\r\n//         console.log('Category updated successfully');\r\n//         setIsUpdateMode(false); // Exit update mode\r\n//         setCurrentCategoryId(null); // Clear current category ID\r\n//       } else {\r\n//         // Add new category\r\n//         await Axios.post('http://localhost:8000/createCategory', {\r\n//           CategoryName: categoryName\r\n//         });\r\n//         console.log('Category added successfully');\r\n//       }\r\n//       setCategoryName(''); // Clear input field after submission\r\n//       setError(''); // Clear any previous error\r\n//       fetchCategories(); // Refresh categories list\r\n//     } catch (error) {\r\n//       console.error('Error submitting form:', error);\r\n//       setError('Error submitting form. Please try again.'); // Generic error message\r\n//     }\r\n//   };\r\n\r\n//   const handleUpdate = (categoryId) => {\r\n//     // Set current category for update\r\n//     const categoryToUpdate = categories.find(category => category._id === categoryId);\r\n//     if (categoryToUpdate) {\r\n//       setCategoryName(categoryToUpdate.CategoryName);\r\n//       setIsUpdateMode(true);\r\n//       setCurrentCategoryId(categoryId);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       <Navigation />\r\n//       <div className=\"pcenter-form\">\r\n//         <Form noValidate onSubmit={handleFormSubmit} className=\"pform\">\r\n//           <h4 className=\"text-center\">{isUpdateMode ? 'Update Category' : 'Add Category'}</h4>\r\n//           <Form.Group controlId=\"validationCategoryName\" className=\"mb-3\">\r\n//             <Form.Label>Category Name</Form.Label>\r\n//             <Form.Control\r\n//               type=\"text\"\r\n//               name=\"CategoryName\"\r\n//               value={categoryName}\r\n//               onChange={handleInputChange}\r\n//               required\r\n//             />\r\n//           </Form.Group>\r\n//           {error && <div className=\"text-danger mb-3\">{error}</div>}\r\n//           <Button className=\"mx-auto d-block\" type=\"submit\">\r\n//             {isUpdateMode ? 'Update Category' : 'Add Category'}\r\n//           </Button>\r\n//         </Form>\r\n//       </div>\r\n//       <div>\r\n//         <h2>Category List</h2>\r\n//         <Table striped bordered hover>\r\n//           <thead>\r\n//             <tr>\r\n//               <th>Category Name</th>\r\n//               <th>Actions</th>\r\n//             </tr>\r\n//           </thead>\r\n//           <tbody>\r\n//             {categories.map(category => (\r\n//               <tr key={category._id}>\r\n//                 <td>{category.CategoryName}</td>\r\n//                 <td>\r\n//                   <Button onClick={() => handleUpdate(category._id)}>Update</Button>\r\n//                 </td>\r\n//               </tr>\r\n//             ))}\r\n//           </tbody>\r\n//         </Table>\r\n//       </div>\r\n//     </>\r\n//   );\r\n// }\r\n\r\n// export default CategoryAdd;\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,MAAM,EAAEC,IAAI,QAAQ,iBAAiB;AAC9C,OAAOC,UAAU,MAAM,mBAAmB;AAC1C,OAAO,yBAAyB;AAChC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE1C,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMiB,iBAAiB,GAAIC,KAAK,IAAK;IACnCJ,eAAe,CAACI,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;IACnCC,OAAO,CAACC,GAAG,CAACT,YAAY,CAAC;EAC3B,CAAC;EAED,MAAMU,gBAAgB,GAAG,MAAOL,KAAK,IAAK;IACxCA,KAAK,CAACM,cAAc,CAAC,CAAC;IAEtB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMpB,KAAK,CAACqB,IAAI,CAAC,sCAAsC,EAAE;QACxEC,YAAY,EAAEd;MAChB,CAAC,CAAC;MACFQ,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEG,QAAQ,CAACG,IAAI,CAAC;MAC1Dd,eAAe,CAAC,EAAE,CAAC,CAAC,CAAC;MACrBE,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;IAChB,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdM,OAAO,CAACN,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9CC,QAAQ,CAAC,0CAA0C,CAAC,CAAC,CAAC;IACxD;EACF,CAAC;;EAGD;EACA,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAG9B,QAAQ,CAAC,EAAE,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACZ,MAAM8B,aAAa,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACA,MAAMN,QAAQ,GAAG,MAAMpB,KAAK,CAAC2B,GAAG,CAAC,gCAAgC,CAAC,CAAC,CAAC;QACpEF,WAAW,CAACL,QAAQ,CAACG,IAAI,CAAC,CAAC,CAAC;MAChC,CAAC,CAAC,OAAOb,KAAK,EAAE;QACZM,OAAO,CAACN,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MACpD;IACJ,CAAC;IAEDgB,aAAa,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,YAAY,GAAG,MAAOC,UAAU,IAAK;IACzCb,OAAO,CAACC,GAAG,CAACY,UAAU,CAAC;IACvB,IAAI;MACA;MACA;MACA;IAAA,CACH,CAAC,OAAOnB,KAAK,EAAE;MACZM,OAAO,CAACN,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAC9D;EACJ,CAAC;EAEC,oBACEP,OAAA,CAAAE,SAAA;IAAAyB,QAAA,gBACE3B,OAAA,CAACJ,UAAU;MAAAgC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACd/B,OAAA;MAAKgC,SAAS,EAAC,cAAc;MAAAL,QAAA,gBAC3B3B,OAAA,CAACL,IAAI;QAACsC,UAAU;QAACC,QAAQ,EAAEnB,gBAAiB;QAACiB,SAAS,EAAC,OAAO;QAAAL,QAAA,gBAC5D3B,OAAA;UAAIgC,SAAS,EAAC,aAAa;UAAAL,QAAA,EAAC;QAAiB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAClD/B,OAAA,CAACL,IAAI,CAACwC,KAAK;UAACC,SAAS,EAAC,wBAAwB;UAACJ,SAAS,EAAC,MAAM;UAAAL,QAAA,gBAC7D3B,OAAA,CAACL,IAAI,CAAC0C,KAAK;YAAAV,QAAA,EAAC;UAAa;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC,eACtC/B,OAAA,CAACL,IAAI,CAAC2C,OAAO;YACXC,IAAI,EAAC,MAAM;YACXC,IAAI,EAAC,cAAc;YACnB5B,KAAK,EAAEP,YAAa;YACpBoC,QAAQ,EAAEhC,iBAAkB;YAC5BiC,QAAQ;UAAA;YAAAd,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACT,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACQ,CAAC,EACZxB,KAAK,iBAAIP,OAAA;UAAKgC,SAAS,EAAC,kBAAkB;UAAAL,QAAA,EAAEpB;QAAK;UAAAqB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACzD/B,OAAA,CAACN,MAAM;UAACsC,SAAS,EAAC,iBAAiB;UAACO,IAAI,EAAC,QAAQ;UAAAZ,QAAA,EAAC;QAAW;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClE,CAAC,eACP/B,OAAA,CAAC2C,KAAK;QAACC,IAAI,EAAEC,YAAa;QAACC,MAAM,EAAEA,CAAA,KAAMC,eAAe,CAAC,KAAK,CAAE;QAAApB,QAAA,gBACxD3B,OAAA,CAAC2C,KAAK,CAACK,MAAM;UAACC,WAAW;UAAAtB,QAAA,eACrB3B,OAAA,CAAC2C,KAAK,CAACO,KAAK;YAAAvB,QAAA,EAAC;UAAc;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAa;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/B,CAAC,eACf/B,OAAA,CAAC2C,KAAK,CAACQ,IAAI;UAAAxB,QAAA,eACP3B,OAAA,CAACL,IAAI;YAAAgC,QAAA,gBACD3B,OAAA,CAACoD,SAAS;cAACpB,SAAS,EAAC,MAAM;cAACI,SAAS,EAAC,cAAc;cAAAT,QAAA,gBAChD3B,OAAA,CAACqD,SAAS;gBAAA1B,QAAA,EAAC;cAAG;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAW,CAAC,eAC1B/B,OAAA,CAACsD,WAAW;gBACRf,IAAI,EAAC,MAAM;gBACXgB,WAAW,EAAC,WAAW;gBACvBd,QAAQ,EAAGe,CAAC,IAAKC,MAAM,CAACD,CAAC,CAAC7C,MAAM,CAACC,KAAK,CAAE;gBACxCA,KAAK,EAAE8C;cAAI;gBAAA9B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACd,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACK,CAAC,eACZ/B,OAAA,CAACoD,SAAS;cAACpB,SAAS,EAAC,MAAM;cAACI,SAAS,EAAC,mBAAmB;cAAAT,QAAA,gBACrD3B,OAAA,CAACqD,SAAS;gBAAA1B,QAAA,EAAC;cAAY;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAW,CAAC,eACnC/B,OAAA,CAACsD,WAAW;gBACRf,IAAI,EAAC,UAAU;gBACfgB,WAAW,EAAC,oBAAoB;gBAChCd,QAAQ,EAAGe,CAAC,IAAKG,cAAc,CAACH,CAAC,CAAC7C,MAAM,CAACC,KAAK,CAAE;gBAChDA,KAAK,EAAEgD;cAAY;gBAAAhC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACtB,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACK,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACV;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC,eACb/B,OAAA,CAAC2C,KAAK,CAACkB,MAAM;UAAAlC,QAAA,gBACT3B,OAAA,CAACN,MAAM;YAACoE,OAAO,EAAC,WAAW;YAACC,OAAO,EAAEA,CAAA,KAAMhB,eAAe,CAAC,KAAK,CAAE;YAAApB,QAAA,EAAC;UAEnE;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACT/B,OAAA,CAACN,MAAM;YAACoE,OAAO,EAAC,SAAS;YAACC,OAAO,EAAEC,oBAAqB;YAAArC,QAAA,EAAC;UAEzD;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACZ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACT,CAAC,eACN/B,OAAA;MAAA2B,QAAA,eACA3B,OAAA;QAAA2B,QAAA,gBACM3B,OAAA,CAACJ,UAAU;UAAAgC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACd/B,OAAA;UAAA2B,QAAA,EACC;QAAa;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACnB/B,OAAA,CAACF,KAAK;UAACmE,OAAO;UAACC,QAAQ;UAACC,KAAK;UAAAxC,QAAA,gBACzB3B,OAAA;YAAA2B,QAAA,eACI3B,OAAA;cAAA2B,QAAA,gBACI3B,OAAA;gBAAA2B,QAAA,EAAI;cAAa;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACtB/B,OAAA;gBAAA4B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACT;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACF,CAAC,eACR/B,OAAA;YAAA2B,QAAA,EACKN,QAAQ,CAAC+C,GAAG,CAAC/C,QAAQ,iBAClBrB,OAAA;cAAA2B,QAAA,gBACI3B,OAAA;gBAAA2B,QAAA,EAAKN,QAAQ,CAACF;cAAY;gBAAAS,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAChC/B,OAAA;gBAAA2B,QAAA,eACI3B,OAAA,CAACN,MAAM;kBAACqE,OAAO,EAAEA,CAAA,KAAMtC,YAAY,CAACJ,QAAQ,CAACgD,GAAG,CAAE;kBAAA1C,QAAA,EAAC;gBAAM;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAClE,CAAC;YAAA,GAJAV,QAAQ,CAACgD,GAAG;cAAAzC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAKjB,CACP;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA,eACN,CAAC;AAEP;AAAC3B,EAAA,CAvIQD,WAAW;AAAAmE,EAAA,GAAXnE,WAAW;AAyIpB,eAAeA,WAAW;;AAM1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAmE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}