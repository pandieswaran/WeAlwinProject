{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Pandi Eswaran\\\\projects\\\\Shopify\\\\admin_frontend\\\\src\\\\Pages\\\\ProductUpdate.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { Button, Form } from 'react-bootstrap';\n// import { Formik } from 'formik';\n// import * as yup from 'yup';\n// import Navigation from '../Components/Nav';\n// import Axios from 'axios';\n// import { useParams, useNavigate } from 'react-router-dom';\n// import '../Pages/ProductAdd.css';\n\n// const schema = yup.object().shape({\n//   ProductName: yup.string().required('Product Name is required'),\n//   Price: yup.number().required('Price is required').typeError('Price must be a number'),\n//   Quantity: yup.number().required('Quantity is required').typeError('Quantity must be a number'),\n//   Category: yup.string().required('Category is required'),\n//   SubCategory: yup.string().required('Subcategory is required'),\n//   Brand: yup.string().required('Brand is required'),\n// });\n\n// function ProductUpdate() {\n//   const { productId } = useParams(); // Fetching productId from URL params\n//   const navigate = useNavigate();\n\n//   const [categories, setCategories] = useState([]);\n//   const [subCategories, setSubCategories] = useState([]);\n//   const [selectedCategory, setSelectedCategory] = useState('');\n\n//   // Fetch Categories\n//   useEffect(() => {\n//     fetchCategories();\n//   }, []);\n\n//   const fetchCategories = async () => {\n//     try {\n//       const response = await Axios.get('http://localhost:8000/category');\n//       setCategories(response.data);\n//     } catch (error) {\n//       console.error('Error fetching categories:', error);\n//     }\n//   };\n\n//   // Fetch Subcategories\n//   useEffect(() => {\n//     const fetchSubCategories = async () => {\n//       try {\n//         const response = await Axios.get('http://localhost:8000/subcategory');\n//         setSubCategories(response.data);\n//         console.log(subCategories)\n//       } catch (error) {\n//         console.error('Error fetching subcategories:', error);\n//       }\n//     };\n\n//     fetchSubCategories();\n//   }, []);\n\n//   const [initialValues, setInitialValues] = useState({\n//     ProductName: '',\n//     Price: '',\n//     Description: '',\n//     Quantity: '',\n//     Category: '',\n//     SubCategory: '',\n//     Brand: ''\n//   });\n\n//   useEffect(() => {\n//     const fetchProduct = async () => {\n//       try {\n//         const response = await Axios.get(`http://localhost:8000/products/${productId}`);\n//         const productData = response.data;\n//         setInitialValues({\n//           ProductName: productData.ProductName,\n//           Price: productData.Price,\n//           Description: productData.Description,\n//           Quantity: productData.Quantity,\n//           Category: productData.Category._id,\n//           SubCategory: productData.SubCategory._id,\n//           Brand: productData.Brand\n//         });\n//       } catch (error) {\n//         console.error('Error fetching product:', error);\n//       }\n//     };\n\n//     fetchProduct();\n//   }, [productId]);\n\n//   const handleFormSubmit = async (values) => {\n//     try {\n//       const response = await Axios.put(`http://localhost:8000/products/${productId}`, values);\n//       console.log('Product updated successfully:', response.data);\n//       navigate('/home'); // Redirect to product list page after successful update\n//     } catch (error) {\n//       console.error('Error updating product:', error);\n//     }\n//   };\n\n//   return (\n//     <>\n//       <Navigation />\n//       <div className=\"pcenter-form\">\n//         <Formik\n//           initialValues={initialValues}\n//           validationSchema={schema}\n//           onSubmit={handleFormSubmit}\n//           enableReinitialize // Allows form to reinitialize with new initialValues\n//         >\n//           {({ handleSubmit, handleChange, values, touched, errors, setFieldValue }) => (\n//             <Form noValidate onSubmit={handleSubmit} className=\"pform\">\n//               <h4 className=\"text-center\">Edit Product</h4>\n\n//               <Form.Group controlId=\"validationProductName\" className=\"mb-3\">\n//                 <Form.Label>Product Name</Form.Label>\n//                 <Form.Control\n//                   type=\"text\"\n//                   name=\"ProductName\"\n//                   value={values.ProductName}\n//                   onChange={handleChange}\n//                   isInvalid={touched.ProductName && !!errors.ProductName}\n//                 />\n//                 <Form.Control.Feedback type=\"invalid\">\n//                   {errors.ProductName}\n//                 </Form.Control.Feedback>\n//               </Form.Group>\n\n//               <Form.Group controlId=\"validationPrice\" className=\"mb-3\">\n//                 <Form.Label>Price</Form.Label>\n//                 <Form.Control\n//                   type=\"text\"\n//                   name=\"Price\"\n//                   value={values.Price}\n//                   onChange={handleChange}\n//                   isInvalid={touched.Price && !!errors.Price}\n//                 />\n//                 <Form.Control.Feedback type=\"invalid\">\n//                   {errors.Price}\n//                 </Form.Control.Feedback>\n//               </Form.Group>\n\n//               <Form.Group controlId=\"validationDescription\" className=\"mb-3\">\n//                 <Form.Label>Description</Form.Label>\n//                 <Form.Control\n//                   type=\"text\"\n//                   name=\"Description\"\n//                   value={values.Description}\n//                   onChange={handleChange}\n//                   isInvalid={touched.Description && !!errors.Description}\n//                 />\n//                 <Form.Control.Feedback type=\"invalid\">\n//                   {errors.Description}\n//                 </Form.Control.Feedback>\n//               </Form.Group>\n\n//               <Form.Group controlId=\"validationQuantity\" className=\"mb-3\">\n//                 <Form.Label>Quantity</Form.Label>\n//                 <Form.Control\n//                   type=\"text\"\n//                   name=\"Quantity\"\n//                   value={values.Quantity}\n//                   onChange={handleChange}\n//                   isInvalid={touched.Quantity && !!errors.Quantity}\n//                 />\n//                 <Form.Control.Feedback type=\"invalid\">\n//                   {errors.Quantity}\n//                 </Form.Control.Feedback>\n//               </Form.Group>\n\n//               <Form.Group controlId=\"validationCategory\" className=\"mb-3\">\n//                 <Form.Label>Category</Form.Label>\n//                 <Form.Control\n//                   as=\"select\"\n//                   name=\"Category\"\n//                   value={values.selectedCategory} //\n//                   onChange={(e) => {\n//                     handleChange(e);\n//                     setSelectedCategory(e.target.value); // Update selected category\n//                   }}\n//                   isInvalid={touched.Category && !!errors.Category}\n//                 >\n//                   <option value=\"\">Select Category...</option>\n//                   {categories.map(category => (\n//                     <option key={category._id} value={category._id}>\n//                       {category.CategoryName}\n//                     </option>\n//                   ))}\n//                 </Form.Control>\n//                 <Form.Control.Feedback type=\"invalid\">\n//                   {errors.Category}\n//                 </Form.Control.Feedback>\n//               </Form.Group>\n\n//               <Form.Group controlId=\"validationSubCategory\" className=\"mb-3\">\n//                 <Form.Label>Subcategory</Form.Label>\n//                 <Form.Control\n//                   as=\"select\"\n//                   name=\"SubCategory\"\n//                   value={values.SubCategory}\n//                   onChange={handleChange}\n//                   isInvalid={touched.SubCategory && !!errors.SubCategory}\n//                 >\n//                   <option value=\"\">Select Subcategory...</option>\n//                   {subCategories.map(subcategory => (\n//                     <option key={subcategory._id} value={subcategory._id}>\n//                       {subcategory.subcategory}\n//                     </option>\n//                   ))}\n//                 </Form.Control>\n//                 <Form.Control.Feedback type=\"invalid\">\n//                   {errors.SubCategory}\n//                 </Form.Control.Feedback>\n//               </Form.Group>\n\n//               <Form.Group controlId=\"validationBrand\" className=\"mb-3\">\n//                 <Form.Label>Brand</Form.Label>\n//                 <Form.Control\n//                   type=\"text\"\n//                   name=\"Brand\"\n//                   value={values.Brand}\n//                   onChange={handleChange}\n//                   isInvalid={touched.Brand && !!errors.Brand}\n//                 />\n//                 <Form.Control.Feedback type=\"invalid\">\n//                   {errors.Brand}\n//                 </Form.Control.Feedback>\n//               </Form.Group>\n\n//               <Button className=\"mx-auto d-block\" type=\"submit\">Update Product</Button>\n//             </Form>\n//           )}\n//         </Formik>\n//       </div>\n//     </>\n//   );\n// }\n\n// export default ProductUpdate;\n// import React, { useState, useEffect } from 'react';\n// import { Button, Form } from 'react-bootstrap';\n// import { Formik } from 'formik';\n// import * as yup from 'yup';\n// import Navigation from '../Components/Nav';\n// import Axios from 'axios';\n// import { useParams, useNavigate } from 'react-router-dom';\n// import '../Pages/ProductAdd.css';\n\n// const schema = yup.object().shape({\n//   ProductName: yup.string().required('Product Name is required'),\n//   Price: yup.number().required('Price is required').typeError('Price must be a number'),\n//   Quantity: yup.number().required('Quantity is required').typeError('Quantity must be a number'),\n//   Category: yup.string().required('Category is required'),\n//   SubCategory: yup.string().required('Subcategory is required'),\n//   Brand: yup.string().required('Brand is required'),\n// });\n\n// function ProductUpdate() {\n//   const { productId } = useParams(); // Fetching productId from URL params\n//   const navigate = useNavigate();\n\n//   const [categories, setCategories] = useState([]);\n//   const [subCategories, setSubCategories] = useState([]);\n\n//   // Fetch Categories\n//   useEffect(() => {\n//     const fetchCategories = async () => {\n//       try {\n//         const response = await Axios.get('http://localhost:8000/category');\n//         setCategories(response.data);\n//       } catch (error) {\n//         console.error('Error fetching categories:', error);\n//       }\n//     };\n//     fetchCategories();\n//   }, []);\n\n//   // Fetch Subcategories\n//   useEffect(() => {\n//     const fetchSubCategories = async () => {\n//       try {\n//         const response = await Axios.get('http://localhost:8000/subcategory');\n//         setSubCategories(response.data);\n//       } catch (error) {\n//         console.error('Error fetching subcategories:', error);\n//       }\n//     };\n//     fetchSubCategories();\n//   }, []);\n\n//   const [initialValues, setInitialValues] = useState({\n//     ProductName: '',\n//     Price: '',\n//     Description: '',\n//     Quantity: '',\n//     Category: '',\n//     SubCategory: '',\n//     Brand: ''\n//   });\n\n//   useEffect(() => {\n//     const fetchProduct = async () => {\n//       try {\n//         const response = await Axios.get(`http://localhost:8000/products/${productId}`);\n//         const productData = response.data;\n//         setInitialValues({\n//           ProductName: productData.ProductName,\n//           Price: productData.Price,\n//           Description: productData.Description,\n//           Quantity: productData.Quantity,\n//           Category: productData.Category ? productData.Category._id : '',\n//           SubCategory: productData.SubCategory ? productData.SubCategory._id : '',\n//           Brand: productData.Brand\n//         });\n//       } catch (error) {\n//         console.error('Error fetching product:', error);\n//       }\n//     };\n//     fetchProduct();\n//   }, [productId]);\n\n//   const handleFormSubmit = async (values) => {\n//     try {\n//       const response = await Axios.put(`http://localhost:8000/products/${productId}`, values);\n//       console.log('Product updated successfully:', response.data);\n//       navigate('/home'); // Redirect to product list page after successful update\n//     } catch (error) {\n//       console.error('Error updating product:', error);\n//     }\n//   };\n\n//   return (\n//     <>\n//       <Navigation />\n//       <div className=\"pcenter-form\">\n//         <Formik\n//           initialValues={initialValues}\n//           validationSchema={schema}\n//           onSubmit={handleFormSubmit}\n//           enableReinitialize // Allows form to reinitialize with new initialValues\n//         >\n//           {({ handleSubmit, handleChange, values, touched, errors }) => (\n//             <Form noValidate onSubmit={handleSubmit} className=\"pform\">\n//               <h4 className=\"text-center\">Edit Product</h4>\n\n//               <Form.Group controlId=\"validationProductName\" className=\"mb-3\">\n//                 <Form.Label>Product Name</Form.Label>\n//                 <Form.Control\n//                   type=\"text\"\n//                   name=\"ProductName\"\n//                   value={values.ProductName}\n//                   onChange={handleChange}\n//                   isInvalid={touched.ProductName && !!errors.ProductName}\n//                 />\n//                 <Form.Control.Feedback type=\"invalid\">\n//                   {errors.ProductName}\n//                 </Form.Control.Feedback>\n//               </Form.Group>\n\n//               <Form.Group controlId=\"validationPrice\" className=\"mb-3\">\n//                 <Form.Label>Price</Form.Label>\n//                 <Form.Control\n//                   type=\"text\"\n//                   name=\"Price\"\n//                   value={values.Price}\n//                   onChange={handleChange}\n//                   isInvalid={touched.Price && !!errors.Price}\n//                 />\n//                 <Form.Control.Feedback type=\"invalid\">\n//                   {errors.Price}\n//                 </Form.Control.Feedback>\n//               </Form.Group>\n\n//               <Form.Group controlId=\"validationDescription\" className=\"mb-3\">\n//                 <Form.Label>Description</Form.Label>\n//                 <Form.Control\n//                   type=\"text\"\n//                   name=\"Description\"\n//                   value={values.Description}\n//                   onChange={handleChange}\n//                   isInvalid={touched.Description && !!errors.Description}\n//                 />\n//                 <Form.Control.Feedback type=\"invalid\">\n//                   {errors.Description}\n//                 </Form.Control.Feedback>\n//               </Form.Group>\n\n//               <Form.Group controlId=\"validationQuantity\" className=\"mb-3\">\n//                 <Form.Label>Quantity</Form.Label>\n//                 <Form.Control\n//                   type=\"text\"\n//                   name=\"Quantity\"\n//                   value={values.Quantity}\n//                   onChange={handleChange}\n//                   isInvalid={touched.Quantity && !!errors.Quantity}\n//                 />\n//                 <Form.Control.Feedback type=\"invalid\">\n//                   {errors.Quantity}\n//                 </Form.Control.Feedback>\n//               </Form.Group>\n\n//               <Form.Group controlId=\"validationCategory\" className=\"mb-3\">\n//                 <Form.Label>Category</Form.Label>\n//                 <Form.Control\n//                   as=\"select\"\n//                   name=\"Category\"\n//                   value={values.Category}\n//                   onChange={handleChange}\n//                   isInvalid={touched.Category && !!errors.Category}\n//                 >\n//                   <option value=\"\">Select Category...</option>\n//                   {categories.map(category => (\n//                     <option key={category._id} value={category._id}>\n//                       {category.CategoryName}\n//                     </option>\n//                   ))}\n//                 </Form.Control>\n//                 <Form.Control.Feedback type=\"invalid\">\n//                   {errors.Category}\n//                 </Form.Control.Feedback>\n//               </Form.Group>\n\n//               <Form.Group controlId=\"validationSubCategory\" className=\"mb-3\">\n//                 <Form.Label>Subcategory</Form.Label>\n//                 <Form.Control\n//                   as=\"select\"\n//                   name=\"SubCategory\"\n//                   value={values.SubCategory}\n//                   onChange={handleChange}\n//                   isInvalid={touched.SubCategory && !!errors.SubCategory}\n//                 >\n//                   <option value=\"\">Select Subcategory...</option>\n//                   {subCategories.map(subcategory => (\n//                     <option key={subcategory._id} value={subcategory._id}>\n//                       {subcategory.SubCategory}\n//                     </option>\n//                   ))}\n//                 </Form.Control>\n//                 <Form.Control.Feedback type=\"invalid\">\n//                   {errors.SubCategory}\n//                 </Form.Control.Feedback>\n//               </Form.Group>\n\n//               <Form.Group controlId=\"validationBrand\" className=\"mb-3\">\n//                 <Form.Label>Brand</Form.Label>\n//                 <Form.Control\n//                   type=\"text\"\n//                   name=\"Brand\"\n//                   value={values.Brand}\n//                   onChange={handleChange}\n//                   isInvalid={touched.Brand && !!errors.Brand}\n//                 />\n//                 <Form.Control.Feedback type=\"invalid\">\n//                   {errors.Brand}\n//                 </Form.Control.Feedback>\n//               </Form.Group>\n\n//               <Form.Group controlId=\"validationFile\" className=\"mb-3\">\n//                 <Form.Label>File</Form.Label>\n//                 <Form.Control\n//                   type=\"file\"\n//                   name=\"File\"\n//                   accept=\"image/*\"\n//                   onChange={(e) => setFieldValue('File', e.target.files[0])}\n//                   isInvalid={touched.File && !!errors.File}\n//                 />\n//                 <Form.Control.Feedback type=\"invalid\">\n//                   {errors.File}\n//                 </Form.Control.Feedback>\n//               </Form.Group>\n\n//               <Button className=\"mx-auto d-block\" type=\"submit\">Update Product</Button>\n//             </Form>\n//           )}\n//         </Formik>\n//       </div>\n//     </>\n//   );\n// }\n\n// export default ProductUpdate;\n\nimport React, { useState, useEffect } from 'react';\nimport { Button, Form } from 'react-bootstrap';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport Navigation from '../Components/Nav';\nimport Axios from 'axios';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport '../Pages/ProductAdd.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst schema = yup.object().shape({\n  ProductName: yup.string().required('Product Name is required'),\n  Price: yup.number().required('Price is required').typeError('Price must be a number'),\n  Quantity: yup.number().required('Quantity is required').typeError('Quantity must be a number'),\n  Category: yup.string().required('Category is required'),\n  SubCategory: yup.string().required('Subcategory is required'),\n  Brand: yup.string().required('Brand is required'),\n  File: yup.mixed().nullable()\n});\nfunction ProductUpdate() {\n  _s();\n  const {\n    productId\n  } = useParams(); // Fetching productId from URL params\n  const navigate = useNavigate();\n  const [categories, setCategories] = useState([]);\n  const [subCategories, setSubCategories] = useState([]);\n\n  // Fetch Categories\n  useEffect(() => {\n    const fetchCategories = async () => {\n      try {\n        const response = await Axios.get('http://localhost:8000/category');\n        setCategories(response.data);\n      } catch (error) {\n        console.error('Error fetching categories:', error);\n      }\n    };\n    fetchCategories();\n  }, []);\n\n  // Fetch Subcategories\n  useEffect(() => {\n    const fetchSubCategories = async () => {\n      try {\n        const response = await Axios.get('http://localhost:8000/subcategory');\n        setSubCategories(response.data);\n      } catch (error) {\n        console.error('Error fetching subcategories:', error);\n      }\n    };\n    fetchSubCategories();\n  }, []);\n  const [initialValues, setInitialValues] = useState({\n    ProductName: '',\n    Price: '',\n    Description: '',\n    Quantity: '',\n    Category: '',\n    SubCategory: '',\n    Brand: '',\n    File: null\n  });\n  useEffect(() => {\n    const fetchProduct = async () => {\n      try {\n        const response = await Axios.get(`http://localhost:8000/products/${productId}`);\n        const productData = response.data;\n        setInitialValues({\n          ProductName: productData.ProductName,\n          Price: productData.Price,\n          Description: productData.Description,\n          Quantity: productData.Quantity,\n          Category: productData.Category ? productData.Category._id : '',\n          SubCategory: productData.SubCategory ? productData.SubCategory._id : '',\n          Brand: productData.Brand,\n          File: productData.Image\n        });\n      } catch (error) {\n        console.error('Error fetching product:', error);\n      }\n    };\n    fetchProduct();\n  }, [productId]);\n  const handleFormSubmit = async (values, {\n    setSubmitting\n  }) => {\n    try {\n      const formData = new FormData();\n      formData.append('ProductName', values.ProductName);\n      formData.append('Price', values.Price);\n      formData.append('Description', values.Description);\n      formData.append('Quantity', values.Quantity);\n      formData.append('Category', values.Category);\n      formData.append('SubCategory', values.SubCategory);\n      formData.append('Brand', values.Brand);\n      if (values.File) {\n        formData.append('File', values.File);\n      }\n      const response = await Axios.put(`http://localhost:8000/products/${productId}`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      console.log('Product updated successfully:', response.data);\n      navigate('/home'); // Redirect to product list page after successful update\n    } catch (error) {\n      console.error('Error updating product:', error);\n    } finally {\n      setSubmitting(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 600,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pcenter-form\",\n      children: /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: initialValues,\n        validationSchema: schema,\n        onSubmit: handleFormSubmit,\n        enableReinitialize: true // Allows form to reinitialize with new initialValues\n        ,\n        children: ({\n          handleSubmit,\n          handleChange,\n          setFieldValue,\n          values,\n          touched,\n          errors\n        }) => /*#__PURE__*/_jsxDEV(Form, {\n          noValidate: true,\n          onSubmit: handleSubmit,\n          className: \"pform\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"text-center\",\n            children: \"Edit Product\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 610,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"validationProductName\",\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Product Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 613,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              name: \"ProductName\",\n              value: values.ProductName,\n              onChange: handleChange,\n              isInvalid: touched.ProductName && !!errors.ProductName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 614,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n              type: \"invalid\",\n              children: errors.ProductName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 621,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 612,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"validationPrice\",\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Price\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 627,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              name: \"Price\",\n              value: values.Price,\n              onChange: handleChange,\n              isInvalid: touched.Price && !!errors.Price\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 628,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n              type: \"invalid\",\n              children: errors.Price\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 635,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 626,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"validationDescription\",\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 641,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              name: \"Description\",\n              value: values.Description,\n              onChange: handleChange,\n              isInvalid: touched.Description && !!errors.Description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 642,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n              type: \"invalid\",\n              children: errors.Description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 649,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 640,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"validationQuantity\",\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Quantity\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 655,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              name: \"Quantity\",\n              value: values.Quantity,\n              onChange: handleChange,\n              isInvalid: touched.Quantity && !!errors.Quantity\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 656,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n              type: \"invalid\",\n              children: errors.Quantity\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 663,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 654,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"validationCategory\",\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Category\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 669,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              as: \"select\",\n              name: \"Category\",\n              value: values.Category,\n              onChange: handleChange,\n              isInvalid: touched.Category && !!errors.Category,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select Category...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 677,\n                columnNumber: 19\n              }, this), categories.map(category => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: category._id,\n                children: category.CategoryName\n              }, category._id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 679,\n                columnNumber: 21\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 670,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n              type: \"invalid\",\n              children: errors.Category\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 684,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 668,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"validationSubCategory\",\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Subcategory\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 690,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              as: \"select\",\n              name: \"SubCategory\",\n              value: values.SubCategory,\n              onChange: handleChange,\n              isInvalid: touched.SubCategory && !!errors.SubCategory,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select Subcategory...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 698,\n                columnNumber: 19\n              }, this), subCategories.map(subcategory => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: subcategory._id,\n                children: subcategory.SubCategory\n              }, subcategory._id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 700,\n                columnNumber: 21\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 691,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n              type: \"invalid\",\n              children: errors.SubCategory\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 705,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 689,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"validationBrand\",\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Brand\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 711,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              name: \"Brand\",\n              value: values.Brand,\n              onChange: handleChange,\n              isInvalid: touched.Brand && !!errors.Brand\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 712,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n              type: \"invalid\",\n              children: errors.Brand\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 719,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 710,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"validationFile\",\n            className: \"mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"File\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 725,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"file\",\n              name: \"File\",\n              accept: \"image/*\",\n              onChange: e => setFieldValue('File', e.target.files[0]),\n              isInvalid: touched.File && !!errors.File\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 726,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n              type: \"invalid\",\n              children: errors.File\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 733,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: values.File,\n                alt: values.ProductName,\n                style: {\n                  width: '100px',\n                  height: 'auto'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 737,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 736,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 724,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            className: \"mx-auto d-block\",\n            type: \"submit\",\n            children: \"Update Product\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 741,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 609,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 602,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 601,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(ProductUpdate, \"jorPBFbJhs8iaCXESAN+HA3vexg=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = ProductUpdate;\nexport default ProductUpdate;\nvar _c;\n$RefreshReg$(_c, \"ProductUpdate\");","map":{"version":3,"names":["React","useState","useEffect","Button","Form","Formik","yup","Navigation","Axios","useParams","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","schema","object","shape","ProductName","string","required","Price","number","typeError","Quantity","Category","SubCategory","Brand","File","mixed","nullable","ProductUpdate","_s","productId","navigate","categories","setCategories","subCategories","setSubCategories","fetchCategories","response","get","data","error","console","fetchSubCategories","initialValues","setInitialValues","Description","fetchProduct","productData","_id","Image","handleFormSubmit","values","setSubmitting","formData","FormData","append","put","headers","log","children","fileName","_jsxFileName","lineNumber","columnNumber","className","validationSchema","onSubmit","enableReinitialize","handleSubmit","handleChange","setFieldValue","touched","errors","noValidate","Group","controlId","Label","Control","type","name","value","onChange","isInvalid","Feedback","as","map","category","CategoryName","subcategory","accept","e","target","files","src","alt","style","width","height","_c","$RefreshReg$"],"sources":["C:/Users/Pandi Eswaran/projects/Shopify/admin_frontend/src/Pages/ProductUpdate.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { Button, Form } from 'react-bootstrap';\r\n// import { Formik } from 'formik';\r\n// import * as yup from 'yup';\r\n// import Navigation from '../Components/Nav';\r\n// import Axios from 'axios';\r\n// import { useParams, useNavigate } from 'react-router-dom';\r\n// import '../Pages/ProductAdd.css';\r\n\r\n// const schema = yup.object().shape({\r\n//   ProductName: yup.string().required('Product Name is required'),\r\n//   Price: yup.number().required('Price is required').typeError('Price must be a number'),\r\n//   Quantity: yup.number().required('Quantity is required').typeError('Quantity must be a number'),\r\n//   Category: yup.string().required('Category is required'),\r\n//   SubCategory: yup.string().required('Subcategory is required'),\r\n//   Brand: yup.string().required('Brand is required'),\r\n// });\r\n\r\n// function ProductUpdate() {\r\n//   const { productId } = useParams(); // Fetching productId from URL params\r\n//   const navigate = useNavigate();\r\n\r\n//   const [categories, setCategories] = useState([]);\r\n//   const [subCategories, setSubCategories] = useState([]);\r\n//   const [selectedCategory, setSelectedCategory] = useState('');\r\n\r\n\r\n//   // Fetch Categories\r\n//   useEffect(() => {\r\n//     fetchCategories();\r\n//   }, []);\r\n\r\n//   const fetchCategories = async () => {\r\n//     try {\r\n//       const response = await Axios.get('http://localhost:8000/category');\r\n//       setCategories(response.data);\r\n//     } catch (error) {\r\n//       console.error('Error fetching categories:', error);\r\n//     }\r\n//   };\r\n\r\n//   // Fetch Subcategories\r\n//   useEffect(() => {\r\n//     const fetchSubCategories = async () => {\r\n//       try {\r\n//         const response = await Axios.get('http://localhost:8000/subcategory');\r\n//         setSubCategories(response.data);\r\n//         console.log(subCategories)\r\n//       } catch (error) {\r\n//         console.error('Error fetching subcategories:', error);\r\n//       }\r\n//     };\r\n\r\n//     fetchSubCategories();\r\n//   }, []);\r\n\r\n//   const [initialValues, setInitialValues] = useState({\r\n//     ProductName: '',\r\n//     Price: '',\r\n//     Description: '',\r\n//     Quantity: '',\r\n//     Category: '',\r\n//     SubCategory: '',\r\n//     Brand: ''\r\n//   });\r\n\r\n//   useEffect(() => {\r\n//     const fetchProduct = async () => {\r\n//       try {\r\n//         const response = await Axios.get(`http://localhost:8000/products/${productId}`);\r\n//         const productData = response.data;\r\n//         setInitialValues({\r\n//           ProductName: productData.ProductName,\r\n//           Price: productData.Price,\r\n//           Description: productData.Description,\r\n//           Quantity: productData.Quantity,\r\n//           Category: productData.Category._id,\r\n//           SubCategory: productData.SubCategory._id,\r\n//           Brand: productData.Brand\r\n//         });\r\n//       } catch (error) {\r\n//         console.error('Error fetching product:', error);\r\n//       }\r\n//     };\r\n\r\n//     fetchProduct();\r\n//   }, [productId]);\r\n\r\n//   const handleFormSubmit = async (values) => {\r\n//     try {\r\n//       const response = await Axios.put(`http://localhost:8000/products/${productId}`, values);\r\n//       console.log('Product updated successfully:', response.data);\r\n//       navigate('/home'); // Redirect to product list page after successful update\r\n//     } catch (error) {\r\n//       console.error('Error updating product:', error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       <Navigation />\r\n//       <div className=\"pcenter-form\">\r\n//         <Formik\r\n//           initialValues={initialValues}\r\n//           validationSchema={schema}\r\n//           onSubmit={handleFormSubmit}\r\n//           enableReinitialize // Allows form to reinitialize with new initialValues\r\n//         >\r\n//           {({ handleSubmit, handleChange, values, touched, errors, setFieldValue }) => (\r\n//             <Form noValidate onSubmit={handleSubmit} className=\"pform\">\r\n//               <h4 className=\"text-center\">Edit Product</h4>\r\n\r\n//               <Form.Group controlId=\"validationProductName\" className=\"mb-3\">\r\n//                 <Form.Label>Product Name</Form.Label>\r\n//                 <Form.Control\r\n//                   type=\"text\"\r\n//                   name=\"ProductName\"\r\n//                   value={values.ProductName}\r\n//                   onChange={handleChange}\r\n//                   isInvalid={touched.ProductName && !!errors.ProductName}\r\n//                 />\r\n//                 <Form.Control.Feedback type=\"invalid\">\r\n//                   {errors.ProductName}\r\n//                 </Form.Control.Feedback>\r\n//               </Form.Group>\r\n\r\n//               <Form.Group controlId=\"validationPrice\" className=\"mb-3\">\r\n//                 <Form.Label>Price</Form.Label>\r\n//                 <Form.Control\r\n//                   type=\"text\"\r\n//                   name=\"Price\"\r\n//                   value={values.Price}\r\n//                   onChange={handleChange}\r\n//                   isInvalid={touched.Price && !!errors.Price}\r\n//                 />\r\n//                 <Form.Control.Feedback type=\"invalid\">\r\n//                   {errors.Price}\r\n//                 </Form.Control.Feedback>\r\n//               </Form.Group>\r\n\r\n//               <Form.Group controlId=\"validationDescription\" className=\"mb-3\">\r\n//                 <Form.Label>Description</Form.Label>\r\n//                 <Form.Control\r\n//                   type=\"text\"\r\n//                   name=\"Description\"\r\n//                   value={values.Description}\r\n//                   onChange={handleChange}\r\n//                   isInvalid={touched.Description && !!errors.Description}\r\n//                 />\r\n//                 <Form.Control.Feedback type=\"invalid\">\r\n//                   {errors.Description}\r\n//                 </Form.Control.Feedback>\r\n//               </Form.Group>\r\n\r\n//               <Form.Group controlId=\"validationQuantity\" className=\"mb-3\">\r\n//                 <Form.Label>Quantity</Form.Label>\r\n//                 <Form.Control\r\n//                   type=\"text\"\r\n//                   name=\"Quantity\"\r\n//                   value={values.Quantity}\r\n//                   onChange={handleChange}\r\n//                   isInvalid={touched.Quantity && !!errors.Quantity}\r\n//                 />\r\n//                 <Form.Control.Feedback type=\"invalid\">\r\n//                   {errors.Quantity}\r\n//                 </Form.Control.Feedback>\r\n//               </Form.Group>\r\n\r\n//               <Form.Group controlId=\"validationCategory\" className=\"mb-3\">\r\n//                 <Form.Label>Category</Form.Label>\r\n//                 <Form.Control\r\n//                   as=\"select\"\r\n//                   name=\"Category\"\r\n//                   value={values.selectedCategory} //\r\n//                   onChange={(e) => {\r\n//                     handleChange(e);\r\n//                     setSelectedCategory(e.target.value); // Update selected category\r\n//                   }}\r\n//                   isInvalid={touched.Category && !!errors.Category}\r\n//                 >\r\n//                   <option value=\"\">Select Category...</option>\r\n//                   {categories.map(category => (\r\n//                     <option key={category._id} value={category._id}>\r\n//                       {category.CategoryName}\r\n//                     </option>\r\n//                   ))}\r\n//                 </Form.Control>\r\n//                 <Form.Control.Feedback type=\"invalid\">\r\n//                   {errors.Category}\r\n//                 </Form.Control.Feedback>\r\n//               </Form.Group>\r\n\r\n//               <Form.Group controlId=\"validationSubCategory\" className=\"mb-3\">\r\n//                 <Form.Label>Subcategory</Form.Label>\r\n//                 <Form.Control\r\n//                   as=\"select\"\r\n//                   name=\"SubCategory\"\r\n//                   value={values.SubCategory}\r\n//                   onChange={handleChange}\r\n//                   isInvalid={touched.SubCategory && !!errors.SubCategory}\r\n//                 >\r\n//                   <option value=\"\">Select Subcategory...</option>\r\n//                   {subCategories.map(subcategory => (\r\n//                     <option key={subcategory._id} value={subcategory._id}>\r\n//                       {subcategory.subcategory}\r\n//                     </option>\r\n//                   ))}\r\n//                 </Form.Control>\r\n//                 <Form.Control.Feedback type=\"invalid\">\r\n//                   {errors.SubCategory}\r\n//                 </Form.Control.Feedback>\r\n//               </Form.Group>\r\n\r\n\r\n//               <Form.Group controlId=\"validationBrand\" className=\"mb-3\">\r\n//                 <Form.Label>Brand</Form.Label>\r\n//                 <Form.Control\r\n//                   type=\"text\"\r\n//                   name=\"Brand\"\r\n//                   value={values.Brand}\r\n//                   onChange={handleChange}\r\n//                   isInvalid={touched.Brand && !!errors.Brand}\r\n//                 />\r\n//                 <Form.Control.Feedback type=\"invalid\">\r\n//                   {errors.Brand}\r\n//                 </Form.Control.Feedback>\r\n//               </Form.Group>\r\n\r\n//               <Button className=\"mx-auto d-block\" type=\"submit\">Update Product</Button>\r\n//             </Form>\r\n//           )}\r\n//         </Formik>\r\n//       </div>\r\n//     </>\r\n//   );\r\n// }\r\n\r\n// export default ProductUpdate;\r\n// import React, { useState, useEffect } from 'react';\r\n// import { Button, Form } from 'react-bootstrap';\r\n// import { Formik } from 'formik';\r\n// import * as yup from 'yup';\r\n// import Navigation from '../Components/Nav';\r\n// import Axios from 'axios';\r\n// import { useParams, useNavigate } from 'react-router-dom';\r\n// import '../Pages/ProductAdd.css';\r\n\r\n// const schema = yup.object().shape({\r\n//   ProductName: yup.string().required('Product Name is required'),\r\n//   Price: yup.number().required('Price is required').typeError('Price must be a number'),\r\n//   Quantity: yup.number().required('Quantity is required').typeError('Quantity must be a number'),\r\n//   Category: yup.string().required('Category is required'),\r\n//   SubCategory: yup.string().required('Subcategory is required'),\r\n//   Brand: yup.string().required('Brand is required'),\r\n// });\r\n\r\n// function ProductUpdate() {\r\n//   const { productId } = useParams(); // Fetching productId from URL params\r\n//   const navigate = useNavigate();\r\n\r\n//   const [categories, setCategories] = useState([]);\r\n//   const [subCategories, setSubCategories] = useState([]);\r\n\r\n//   // Fetch Categories\r\n//   useEffect(() => {\r\n//     const fetchCategories = async () => {\r\n//       try {\r\n//         const response = await Axios.get('http://localhost:8000/category');\r\n//         setCategories(response.data);\r\n//       } catch (error) {\r\n//         console.error('Error fetching categories:', error);\r\n//       }\r\n//     };\r\n//     fetchCategories();\r\n//   }, []);\r\n\r\n//   // Fetch Subcategories\r\n//   useEffect(() => {\r\n//     const fetchSubCategories = async () => {\r\n//       try {\r\n//         const response = await Axios.get('http://localhost:8000/subcategory');\r\n//         setSubCategories(response.data);\r\n//       } catch (error) {\r\n//         console.error('Error fetching subcategories:', error);\r\n//       }\r\n//     };\r\n//     fetchSubCategories();\r\n//   }, []);\r\n\r\n//   const [initialValues, setInitialValues] = useState({\r\n//     ProductName: '',\r\n//     Price: '',\r\n//     Description: '',\r\n//     Quantity: '',\r\n//     Category: '',\r\n//     SubCategory: '',\r\n//     Brand: ''\r\n//   });\r\n\r\n//   useEffect(() => {\r\n//     const fetchProduct = async () => {\r\n//       try {\r\n//         const response = await Axios.get(`http://localhost:8000/products/${productId}`);\r\n//         const productData = response.data;\r\n//         setInitialValues({\r\n//           ProductName: productData.ProductName,\r\n//           Price: productData.Price,\r\n//           Description: productData.Description,\r\n//           Quantity: productData.Quantity,\r\n//           Category: productData.Category ? productData.Category._id : '',\r\n//           SubCategory: productData.SubCategory ? productData.SubCategory._id : '',\r\n//           Brand: productData.Brand\r\n//         });\r\n//       } catch (error) {\r\n//         console.error('Error fetching product:', error);\r\n//       }\r\n//     };\r\n//     fetchProduct();\r\n//   }, [productId]);\r\n\r\n//   const handleFormSubmit = async (values) => {\r\n//     try {\r\n//       const response = await Axios.put(`http://localhost:8000/products/${productId}`, values);\r\n//       console.log('Product updated successfully:', response.data);\r\n//       navigate('/home'); // Redirect to product list page after successful update\r\n//     } catch (error) {\r\n//       console.error('Error updating product:', error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       <Navigation />\r\n//       <div className=\"pcenter-form\">\r\n//         <Formik\r\n//           initialValues={initialValues}\r\n//           validationSchema={schema}\r\n//           onSubmit={handleFormSubmit}\r\n//           enableReinitialize // Allows form to reinitialize with new initialValues\r\n//         >\r\n//           {({ handleSubmit, handleChange, values, touched, errors }) => (\r\n//             <Form noValidate onSubmit={handleSubmit} className=\"pform\">\r\n//               <h4 className=\"text-center\">Edit Product</h4>\r\n\r\n//               <Form.Group controlId=\"validationProductName\" className=\"mb-3\">\r\n//                 <Form.Label>Product Name</Form.Label>\r\n//                 <Form.Control\r\n//                   type=\"text\"\r\n//                   name=\"ProductName\"\r\n//                   value={values.ProductName}\r\n//                   onChange={handleChange}\r\n//                   isInvalid={touched.ProductName && !!errors.ProductName}\r\n//                 />\r\n//                 <Form.Control.Feedback type=\"invalid\">\r\n//                   {errors.ProductName}\r\n//                 </Form.Control.Feedback>\r\n//               </Form.Group>\r\n\r\n//               <Form.Group controlId=\"validationPrice\" className=\"mb-3\">\r\n//                 <Form.Label>Price</Form.Label>\r\n//                 <Form.Control\r\n//                   type=\"text\"\r\n//                   name=\"Price\"\r\n//                   value={values.Price}\r\n//                   onChange={handleChange}\r\n//                   isInvalid={touched.Price && !!errors.Price}\r\n//                 />\r\n//                 <Form.Control.Feedback type=\"invalid\">\r\n//                   {errors.Price}\r\n//                 </Form.Control.Feedback>\r\n//               </Form.Group>\r\n\r\n//               <Form.Group controlId=\"validationDescription\" className=\"mb-3\">\r\n//                 <Form.Label>Description</Form.Label>\r\n//                 <Form.Control\r\n//                   type=\"text\"\r\n//                   name=\"Description\"\r\n//                   value={values.Description}\r\n//                   onChange={handleChange}\r\n//                   isInvalid={touched.Description && !!errors.Description}\r\n//                 />\r\n//                 <Form.Control.Feedback type=\"invalid\">\r\n//                   {errors.Description}\r\n//                 </Form.Control.Feedback>\r\n//               </Form.Group>\r\n\r\n//               <Form.Group controlId=\"validationQuantity\" className=\"mb-3\">\r\n//                 <Form.Label>Quantity</Form.Label>\r\n//                 <Form.Control\r\n//                   type=\"text\"\r\n//                   name=\"Quantity\"\r\n//                   value={values.Quantity}\r\n//                   onChange={handleChange}\r\n//                   isInvalid={touched.Quantity && !!errors.Quantity}\r\n//                 />\r\n//                 <Form.Control.Feedback type=\"invalid\">\r\n//                   {errors.Quantity}\r\n//                 </Form.Control.Feedback>\r\n//               </Form.Group>\r\n\r\n//               <Form.Group controlId=\"validationCategory\" className=\"mb-3\">\r\n//                 <Form.Label>Category</Form.Label>\r\n//                 <Form.Control\r\n//                   as=\"select\"\r\n//                   name=\"Category\"\r\n//                   value={values.Category}\r\n//                   onChange={handleChange}\r\n//                   isInvalid={touched.Category && !!errors.Category}\r\n//                 >\r\n//                   <option value=\"\">Select Category...</option>\r\n//                   {categories.map(category => (\r\n//                     <option key={category._id} value={category._id}>\r\n//                       {category.CategoryName}\r\n//                     </option>\r\n//                   ))}\r\n//                 </Form.Control>\r\n//                 <Form.Control.Feedback type=\"invalid\">\r\n//                   {errors.Category}\r\n//                 </Form.Control.Feedback>\r\n//               </Form.Group>\r\n\r\n//               <Form.Group controlId=\"validationSubCategory\" className=\"mb-3\">\r\n//                 <Form.Label>Subcategory</Form.Label>\r\n//                 <Form.Control\r\n//                   as=\"select\"\r\n//                   name=\"SubCategory\"\r\n//                   value={values.SubCategory}\r\n//                   onChange={handleChange}\r\n//                   isInvalid={touched.SubCategory && !!errors.SubCategory}\r\n//                 >\r\n//                   <option value=\"\">Select Subcategory...</option>\r\n//                   {subCategories.map(subcategory => (\r\n//                     <option key={subcategory._id} value={subcategory._id}>\r\n//                       {subcategory.SubCategory}\r\n//                     </option>\r\n//                   ))}\r\n//                 </Form.Control>\r\n//                 <Form.Control.Feedback type=\"invalid\">\r\n//                   {errors.SubCategory}\r\n//                 </Form.Control.Feedback>\r\n//               </Form.Group>\r\n\r\n//               <Form.Group controlId=\"validationBrand\" className=\"mb-3\">\r\n//                 <Form.Label>Brand</Form.Label>\r\n//                 <Form.Control\r\n//                   type=\"text\"\r\n//                   name=\"Brand\"\r\n//                   value={values.Brand}\r\n//                   onChange={handleChange}\r\n//                   isInvalid={touched.Brand && !!errors.Brand}\r\n//                 />\r\n//                 <Form.Control.Feedback type=\"invalid\">\r\n//                   {errors.Brand}\r\n//                 </Form.Control.Feedback>\r\n//               </Form.Group>\r\n\r\n//               <Form.Group controlId=\"validationFile\" className=\"mb-3\">\r\n//                 <Form.Label>File</Form.Label>\r\n//                 <Form.Control\r\n//                   type=\"file\"\r\n//                   name=\"File\"\r\n//                   accept=\"image/*\"\r\n//                   onChange={(e) => setFieldValue('File', e.target.files[0])}\r\n//                   isInvalid={touched.File && !!errors.File}\r\n//                 />\r\n//                 <Form.Control.Feedback type=\"invalid\">\r\n//                   {errors.File}\r\n//                 </Form.Control.Feedback>\r\n//               </Form.Group>\r\n\r\n//               <Button className=\"mx-auto d-block\" type=\"submit\">Update Product</Button>\r\n//             </Form>\r\n//           )}\r\n//         </Formik>\r\n//       </div>\r\n//     </>\r\n//   );\r\n// }\r\n\r\n// export default ProductUpdate;\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Button, Form } from 'react-bootstrap';\r\nimport { Formik } from 'formik';\r\nimport * as yup from 'yup';\r\nimport Navigation from '../Components/Nav';\r\nimport Axios from 'axios';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport '../Pages/ProductAdd.css';\r\n\r\nconst schema = yup.object().shape({\r\n  ProductName: yup.string().required('Product Name is required'),\r\n  Price: yup.number().required('Price is required').typeError('Price must be a number'),\r\n  Quantity: yup.number().required('Quantity is required').typeError('Quantity must be a number'),\r\n  Category: yup.string().required('Category is required'),\r\n  SubCategory: yup.string().required('Subcategory is required'),\r\n  Brand: yup.string().required('Brand is required'),\r\n  File: yup.mixed().nullable()\r\n});\r\n\r\nfunction ProductUpdate() {\r\n  const { productId } = useParams(); // Fetching productId from URL params\r\n  const navigate = useNavigate();\r\n\r\n  const [categories, setCategories] = useState([]);\r\n  const [subCategories, setSubCategories] = useState([]);\r\n\r\n  // Fetch Categories\r\n  useEffect(() => {\r\n    const fetchCategories = async () => {\r\n      try {\r\n        const response = await Axios.get('http://localhost:8000/category');\r\n        setCategories(response.data);\r\n      } catch (error) {\r\n        console.error('Error fetching categories:', error);\r\n      }\r\n    };\r\n    fetchCategories();\r\n  }, []);\r\n\r\n  // Fetch Subcategories\r\n  useEffect(() => {\r\n    const fetchSubCategories = async () => {\r\n      try {\r\n        const response = await Axios.get('http://localhost:8000/subcategory');\r\n        setSubCategories(response.data);\r\n      } catch (error) {\r\n        console.error('Error fetching subcategories:', error);\r\n      }\r\n    };\r\n    fetchSubCategories();\r\n  }, []);\r\n\r\n  const [initialValues, setInitialValues] = useState({\r\n    ProductName: '',\r\n    Price: '',\r\n    Description: '',\r\n    Quantity: '',\r\n    Category: '',\r\n    SubCategory: '',\r\n    Brand: '',\r\n    File: null\r\n  });\r\n\r\n  useEffect(() => {\r\n    const fetchProduct = async () => {\r\n      try {\r\n        const response = await Axios.get(`http://localhost:8000/products/${productId}`);\r\n        const productData = response.data;\r\n        setInitialValues({\r\n          ProductName: productData.ProductName,\r\n          Price: productData.Price,\r\n          Description: productData.Description,\r\n          Quantity: productData.Quantity,\r\n          Category: productData.Category ? productData.Category._id : '',\r\n          SubCategory: productData.SubCategory ? productData.SubCategory._id : '',\r\n          Brand: productData.Brand,\r\n          File: productData.Image\r\n        });\r\n      } catch (error) {\r\n        console.error('Error fetching product:', error);\r\n      }\r\n    };\r\n    fetchProduct();\r\n  }, [productId]);\r\n\r\n  const handleFormSubmit = async (values, { setSubmitting }) => {\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('ProductName', values.ProductName);\r\n      formData.append('Price', values.Price);\r\n      formData.append('Description', values.Description);\r\n      formData.append('Quantity', values.Quantity);\r\n      formData.append('Category', values.Category);\r\n      formData.append('SubCategory', values.SubCategory);\r\n      formData.append('Brand', values.Brand);\r\n      if (values.File) {\r\n        formData.append('File', values.File);\r\n      }\r\n\r\n \r\n\r\n      const response = await Axios.put(`http://localhost:8000/products/${productId}`, formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data'\r\n        }\r\n      });\r\n\r\n      console.log('Product updated successfully:', response.data);\r\n      navigate('/home'); // Redirect to product list page after successful update\r\n    } catch (error) {\r\n      console.error('Error updating product:', error);\r\n    } finally {\r\n      setSubmitting(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Navigation />\r\n      <div className=\"pcenter-form\">\r\n        <Formik\r\n          initialValues={initialValues}\r\n          validationSchema={schema}\r\n          onSubmit={handleFormSubmit}\r\n          enableReinitialize // Allows form to reinitialize with new initialValues\r\n        >\r\n          {({ handleSubmit, handleChange, setFieldValue, values, touched, errors }) => (\r\n            <Form noValidate onSubmit={handleSubmit} className=\"pform\">\r\n              <h4 className=\"text-center\">Edit Product</h4>\r\n\r\n              <Form.Group controlId=\"validationProductName\" className=\"mb-3\">\r\n                <Form.Label>Product Name</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  name=\"ProductName\"\r\n                  value={values.ProductName}\r\n                  onChange={handleChange}\r\n                  isInvalid={touched.ProductName && !!errors.ProductName}\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                  {errors.ProductName}\r\n                </Form.Control.Feedback>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId=\"validationPrice\" className=\"mb-3\">\r\n                <Form.Label>Price</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  name=\"Price\"\r\n                  value={values.Price}\r\n                  onChange={handleChange}\r\n                  isInvalid={touched.Price && !!errors.Price}\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                  {errors.Price}\r\n                </Form.Control.Feedback>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId=\"validationDescription\" className=\"mb-3\">\r\n                <Form.Label>Description</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  name=\"Description\"\r\n                  value={values.Description}\r\n                  onChange={handleChange}\r\n                  isInvalid={touched.Description && !!errors.Description}\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                  {errors.Description}\r\n                </Form.Control.Feedback>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId=\"validationQuantity\" className=\"mb-3\">\r\n                <Form.Label>Quantity</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  name=\"Quantity\"\r\n                  value={values.Quantity}\r\n                  onChange={handleChange}\r\n                  isInvalid={touched.Quantity && !!errors.Quantity}\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                  {errors.Quantity}\r\n                </Form.Control.Feedback>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId=\"validationCategory\" className=\"mb-3\">\r\n                <Form.Label>Category</Form.Label>\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  name=\"Category\"\r\n                  value={values.Category}\r\n                  onChange={handleChange}\r\n                  isInvalid={touched.Category && !!errors.Category}\r\n                >\r\n                  <option value=\"\">Select Category...</option>\r\n                  {categories.map(category => (\r\n                    <option key={category._id} value={category._id}>\r\n                      {category.CategoryName}\r\n                    </option>\r\n                  ))}\r\n                </Form.Control>\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                  {errors.Category}\r\n                </Form.Control.Feedback>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId=\"validationSubCategory\" className=\"mb-3\">\r\n                <Form.Label>Subcategory</Form.Label>\r\n                <Form.Control\r\n                  as=\"select\"\r\n                  name=\"SubCategory\"\r\n                  value={values.SubCategory}\r\n                  onChange={handleChange}\r\n                  isInvalid={touched.SubCategory && !!errors.SubCategory}\r\n                >\r\n                  <option value=\"\">Select Subcategory...</option>\r\n                  {subCategories.map(subcategory => (\r\n                    <option key={subcategory._id} value={subcategory._id}>\r\n                      {subcategory.SubCategory}\r\n                    </option>\r\n                  ))}\r\n                </Form.Control>\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                  {errors.SubCategory}\r\n                </Form.Control.Feedback>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId=\"validationBrand\" className=\"mb-3\">\r\n                <Form.Label>Brand</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  name=\"Brand\"\r\n                  value={values.Brand}\r\n                  onChange={handleChange}\r\n                  isInvalid={touched.Brand && !!errors.Brand}\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                  {errors.Brand}\r\n                </Form.Control.Feedback>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId=\"validationFile\" className=\"mb-3\">\r\n                <Form.Label>File</Form.Label>\r\n                <Form.Control\r\n                  type=\"file\"\r\n                  name=\"File\"\r\n                  accept=\"image/*\"\r\n                  onChange={(e) => setFieldValue('File', e.target.files[0])}\r\n                  isInvalid={touched.File && !!errors.File}\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                  {errors.File}\r\n                </Form.Control.Feedback>\r\n                <div>\r\n                <img src={values.File} alt={values.ProductName} style={{ width: '100px', height: 'auto' }} />\r\n                </div>\r\n              </Form.Group>\r\n\r\n              <Button className=\"mx-auto d-block\" type=\"submit\">Update Product</Button>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ProductUpdate;\r\n\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,MAAM,EAAEC,IAAI,QAAQ,iBAAiB;AAC9C,SAASC,MAAM,QAAQ,QAAQ;AAC/B,OAAO,KAAKC,GAAG,MAAM,KAAK;AAC1B,OAAOC,UAAU,MAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}